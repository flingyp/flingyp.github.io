import{_ as s,c as a,o as n,X as l}from"./chunks/framework.12317601.js";const d=JSON.parse('{"title":"类型体操","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/TypeScript/TypeGymnastics.md","filePath":"frontend/TypeScript/TypeGymnastics.md"}'),p={name:"frontend/TypeScript/TypeGymnastics.md"},o=l(`<h1 id="类型体操" tabindex="-1">类型体操 <a class="header-anchor" href="#类型体操" aria-label="Permalink to &quot;类型体操&quot;">​</a></h1><h2 id="_00004-easy-pick" tabindex="-1">00004-easy-pick <a class="header-anchor" href="#_00004-easy-pick" aria-label="Permalink to &quot;00004-easy-pick&quot;">​</a></h2><p>实现 TS 内置的 <code>Pick&lt;T, K&gt;</code></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">type</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">MyPick</span><span style="color:#666666;">&lt;</span><span style="color:#5DA994;">T</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">K</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">extends</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">keyof</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">T</span><span style="color:#666666;">&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">[</span><span style="color:#5DA994;">P</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">in</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">K</span><span style="color:#666666;">]: </span><span style="color:#5DA994;">T</span><span style="color:#666666;">[</span><span style="color:#5DA994;">P</span><span style="color:#666666;">];</span></span>
<span class="line"><span style="color:#666666;">};</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">MyPick</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">T</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">K</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">extends</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">keyof</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">T</span><span style="color:#999999;">&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">[</span><span style="color:#2E8F82;">P</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">in</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">K</span><span style="color:#999999;">]: </span><span style="color:#2E8F82;">T</span><span style="color:#999999;">[</span><span style="color:#2E8F82;">P</span><span style="color:#999999;">];</span></span>
<span class="line"><span style="color:#999999;">};</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">interface</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">Todo</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">title</span><span style="color:#666666;">: </span><span style="color:#5DA994;">string</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">description</span><span style="color:#666666;">: </span><span style="color:#5DA994;">string</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">completed</span><span style="color:#666666;">: </span><span style="color:#5DA994;">boolean</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">type</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">TodoExcludeCompleted</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">MyPick</span><span style="color:#666666;">&lt;</span><span style="color:#5DA994;">Todo</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">title</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">|</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">description</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">&gt;;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Todo</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">title</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">description</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">completed</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">boolean</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">TodoExcludeCompleted</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">MyPick</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">Todo</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">title</span><span style="color:#B5695999;">&quot;</span><span style="color:#393A34;"> </span><span style="color:#999999;">|</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">description</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">&gt;;</span></span></code></pre></div><p>关键点：</p><ul><li><code>keyof</code> 关键字会将对象类型 T 的属性 Key 全部收集起来，组成一个联合类型</li><li><code>[P in K]</code> TS 中的对象类型的遍历</li></ul><h2 id="_00007-easy-readonly" tabindex="-1">00007-easy-readonly <a class="header-anchor" href="#_00007-easy-readonly" aria-label="Permalink to &quot;00007-easy-readonly&quot;">​</a></h2><p>实现内置的 <code>Readonly&lt;T&gt;</code>，给每个属性都添加 <code>readonly</code></p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">type</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">MyReadonly</span><span style="color:#666666;">&lt;</span><span style="color:#5DA994;">T</span><span style="color:#666666;">&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">readonly</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[</span><span style="color:#5DA994;">K</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">in</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">keyof</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">T</span><span style="color:#666666;">]: </span><span style="color:#5DA994;">T</span><span style="color:#666666;">[</span><span style="color:#5DA994;">K</span><span style="color:#666666;">];</span></span>
<span class="line"><span style="color:#666666;">};</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">MyReadonly</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">T</span><span style="color:#999999;">&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">readonly</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#2E8F82;">K</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">in</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">keyof</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">T</span><span style="color:#999999;">]: </span><span style="color:#2E8F82;">T</span><span style="color:#999999;">[</span><span style="color:#2E8F82;">K</span><span style="color:#999999;">];</span></span>
<span class="line"><span style="color:#999999;">};</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">interface</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">Todo</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">title</span><span style="color:#666666;">: </span><span style="color:#5DA994;">string</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">description</span><span style="color:#666666;">: </span><span style="color:#5DA994;">string</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">completed</span><span style="color:#666666;">: </span><span style="color:#5DA994;">boolean</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">meta</span><span style="color:#666666;">: {</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#BD976A;">author</span><span style="color:#666666;">: </span><span style="color:#5DA994;">string</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#666666;">  };</span></span>
<span class="line"><span style="color:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">type</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">ReadonlyTodo</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">MyReadonly</span><span style="color:#666666;">&lt;</span><span style="color:#5DA994;">Todo</span><span style="color:#666666;">&gt;;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">interface</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Todo</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">title</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">description</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">completed</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">boolean</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">meta</span><span style="color:#999999;">: {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#B07D48;">author</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">string</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#999999;">  };</span></span>
<span class="line"><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">ReadonlyTodo</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">MyReadonly</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">Todo</span><span style="color:#999999;">&gt;;</span></span></code></pre></div><p>关键点：</p><ul><li>在对象类型的便利前面加个 readonly 关键字</li></ul><h2 id="_00011-easy-tuple-to-object" tabindex="-1">00011-easy-tuple-to-object <a class="header-anchor" href="#_00011-easy-tuple-to-object" aria-label="Permalink to &quot;00011-easy-tuple-to-object&quot;">​</a></h2><p>会传入一个元组类型，将这个元组类型转换为对象类型。这个对象类型的键/值都是从元组中遍历出来</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">type</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">TuppleToObject</span><span style="color:#666666;">&lt;</span><span style="color:#5DA994;">T</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">extends</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">readonly</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span><span style="color:#5DA994;">string</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">|</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">number</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">|</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">symbol</span><span style="color:#666666;">)[]&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">[</span><span style="color:#5DA994;">key</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">in</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">T</span><span style="color:#666666;">[</span><span style="color:#5DA994;">number</span><span style="color:#666666;">]]: </span><span style="color:#5DA994;">key</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#666666;">};</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">TuppleToObject</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">T</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">extends</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">readonly</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#2E8F82;">string</span><span style="color:#393A34;"> </span><span style="color:#999999;">|</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">number</span><span style="color:#393A34;"> </span><span style="color:#999999;">|</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">symbol</span><span style="color:#999999;">)[]&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">[</span><span style="color:#2E8F82;">key</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">in</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">T</span><span style="color:#999999;">[</span><span style="color:#2E8F82;">number</span><span style="color:#999999;">]]: </span><span style="color:#2E8F82;">key</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#999999;">};</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">const </span><span style="color:#BD976A;">tuple</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#666666;">[</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">tesla</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">model 3</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">model X</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">model Y</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">]</span><span style="color:#CB7676;"> </span><span style="color:#4D9375;">as</span><span style="color:#CB7676;"> const</span><span style="color:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">const </span><span style="color:#BD976A;">tupleToObject</span><span style="color:#666666;">: </span><span style="color:#5DA994;">TupleToObject</span><span style="color:#666666;">&lt;</span><span style="color:#CB7676;">typeof</span><span style="color:#666666;"> </span><span style="color:#BD976A;">tuple</span><span style="color:#666666;">&gt; =</span><span style="color:#CB7676;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#B8A965;">tesla</span><span style="color:#666666;">: </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">tesla</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">model 3</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">: </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">model 3</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">model X</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">: </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">model X</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">model Y</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">: </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">model Y</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#666666;">};</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">tuple</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#999999;">[</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">tesla</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">model 3</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">model X</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">model Y</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">]</span><span style="color:#AB5959;"> </span><span style="color:#1E754F;">as</span><span style="color:#AB5959;"> const</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">tupleToObject</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">TupleToObject</span><span style="color:#999999;">&lt;</span><span style="color:#AB5959;">typeof</span><span style="color:#999999;"> </span><span style="color:#B07D48;">tuple</span><span style="color:#999999;">&gt; =</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">tesla</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">tesla</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">model 3</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">model 3</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">model X</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">model X</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">model Y</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">model Y</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">};</span></span></code></pre></div><p>关键点：</p><ul><li>如果去遍历一个数字类型/元组类型： <code>[key in T[number]]</code></li></ul><h2 id="_00014-easy-first" tabindex="-1">00014-easy-first <a class="header-anchor" href="#_00014-easy-first" aria-label="Permalink to &quot;00014-easy-first&quot;">​</a></h2><p>实现一个通用<code>First&lt;T&gt;</code>，它接受一个数组 T 并返回它的第一个元素的类型</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">type</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">First</span><span style="color:#666666;">&lt;</span><span style="color:#5DA994;">T</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">extends</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">any</span><span style="color:#666666;">[]&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">T</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">extends</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[]</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">?</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">never</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">T</span><span style="color:#666666;">[</span><span style="color:#4C9A91;">0</span><span style="color:#666666;">];</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">First</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">T</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">extends</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">any</span><span style="color:#999999;">[]&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">T</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">extends</span><span style="color:#393A34;"> </span><span style="color:#999999;">[]</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">never</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">T</span><span style="color:#999999;">[</span><span style="color:#2F798A;">0</span><span style="color:#999999;">];</span></span></code></pre></div><p>关键点：</p><ul><li>TS 类型的三元表达式：<code>T extends Type ? Type1 : Type2;</code></li></ul><h2 id="_00018-easy-tuple-length" tabindex="-1">00018-easy-tuple-length <a class="header-anchor" href="#_00018-easy-tuple-length" aria-label="Permalink to &quot;00018-easy-tuple-length&quot;">​</a></h2><p>创建一个通用的 Length，接受一个 readonly 的数组，返回这个数组的长度</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">type</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">Length</span><span style="color:#666666;">&lt;</span><span style="color:#5DA994;">T</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">extends</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">readonly</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">any</span><span style="color:#666666;">[]&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">T</span><span style="color:#666666;">[</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">length</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">];</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Length</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">T</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">extends</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">readonly</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">any</span><span style="color:#999999;">[]&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">T</span><span style="color:#999999;">[</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">length</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">];</span></span></code></pre></div><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">const </span><span style="color:#BD976A;">tesla</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#666666;">[</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">tesla</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">model 3</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">model X</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span><span style="color:#CB7676;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">model Y</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">]</span><span style="color:#CB7676;"> </span><span style="color:#4D9375;">as</span><span style="color:#CB7676;"> const</span><span style="color:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#CB7676;">type</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">LengthTesla</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">Length</span><span style="color:#666666;">&lt;</span><span style="color:#CB7676;">typeof</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">tesla</span><span style="color:#666666;">&gt;;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">tesla</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#999999;">[</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">tesla</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">model 3</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">model X</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span><span style="color:#AB5959;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">model Y</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">]</span><span style="color:#AB5959;"> </span><span style="color:#1E754F;">as</span><span style="color:#AB5959;"> const</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">LengthTesla</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Length</span><span style="color:#999999;">&lt;</span><span style="color:#AB5959;">typeof</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">tesla</span><span style="color:#999999;">&gt;;</span></span></code></pre></div><p>关键点：</p><ul><li>在 TS 中获取数组类型的长度方式： <code>T[&quot;length&quot;]</code></li></ul><h2 id="_00043-easy-exclude" tabindex="-1">00043-easy-exclude <a class="header-anchor" href="#_00043-easy-exclude" aria-label="Permalink to &quot;00043-easy-exclude&quot;">​</a></h2><p>实现内置的<code>Exclude &lt;T, U&gt;</code>类型，从联合类型 T 中排除 U 的类型成员，来构造一个新的类型</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">type</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">MyExclude</span><span style="color:#666666;">&lt;</span><span style="color:#5DA994;">T</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">U</span><span style="color:#666666;">&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">T</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">extends</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">U</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">?</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">never</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">T</span><span style="color:#666666;">;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">MyExclude</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">T</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">U</span><span style="color:#999999;">&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">T</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">extends</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">U</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">never</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">T</span><span style="color:#999999;">;</span></span></code></pre></div><p>关键点：</p><ul><li>联合类型的遍历： <code>T extends U ? Type1 : Type2</code> （想象成联合类型的每一个类型都会进一遍这个三元表达式，因此来进行判断）</li></ul><h2 id="_00189-easy-awaited" tabindex="-1">00189-easy-awaited <a class="header-anchor" href="#_00189-easy-awaited" aria-label="Permalink to &quot;00189-easy-awaited&quot;">​</a></h2><p>假如我们有一个 Promise 对象，这个 Promise 对象会返回一个类型。在 TS 中，我们用 Promise 中的 T 来描述这个 Promise 返回的类型</p><p>比如：<code>Promise&lt;ExampleType&gt;</code>，请你返回 ExampleType 类型</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">type</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">MyAwaited</span><span style="color:#666666;">&lt;</span><span style="color:#5DA994;">T</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">extends</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">Promise</span><span style="color:#666666;">&lt;</span><span style="color:#5DA994;">unknown</span><span style="color:#666666;">&gt;&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">T</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">extends</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">Promise</span><span style="color:#666666;">&lt;</span><span style="color:#CB7676;">infer</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">X</span><span style="color:#666666;">&gt;</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">?</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">X</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">extends</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">Promise</span><span style="color:#666666;">&lt;</span><span style="color:#5DA994;">unknown</span><span style="color:#666666;">&gt;</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#CB7676;">?</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">MyAwaited</span><span style="color:#666666;">&lt;</span><span style="color:#5DA994;">X</span><span style="color:#666666;">&gt;</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#CB7676;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">X</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">never</span><span style="color:#666666;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;">/**</span></span>
<span class="line"><span style="color:#758575DD;"> * 代码解读</span></span>
<span class="line"><span style="color:#758575DD;"> *  1. 我们传给 MyAwaited&lt;T&gt; 的 T 泛型限制了 必须是 Promise 的类型，这样就解决了  type error = MyAwaited&lt;number&gt;; 的爆红问题</span></span>
<span class="line"><span style="color:#758575DD;"> *  2. 在根据 T 限制了必须是 Promise 类型，所以这段代码 T extends Promise&lt;infer X&gt; ? Type1 : Type2  是一定会走 Type1的，因此 Type2 写什么类型都无所谓</span></span>
<span class="line"><span style="color:#758575DD;"> *  3. 进入到 Type1 后，先要理解下 Infer 关键字 在 条件类型 extends 的作用， Infer 是推断的意思，意思就是 假设 Promise&lt;T&gt; 里的泛型的类型 是 X 类型</span></span>
<span class="line"><span style="color:#758575DD;"> *  4. 然后问 X 类型 它是不是也是 Promise 类型 如果是 则进入 MyAwaited&lt;X&gt; 进行递归操作</span></span>
<span class="line"><span style="color:#758575DD;"> *  5. 如果不是Promise类型，则返回这个 X 类型</span></span>
<span class="line"><span style="color:#758575DD;"> */</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">MyAwaited</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">T</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">extends</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Promise</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">unknown</span><span style="color:#999999;">&gt;&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">T</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">extends</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Promise</span><span style="color:#999999;">&lt;</span><span style="color:#AB5959;">infer</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">X</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">X</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">extends</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">Promise</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">unknown</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">MyAwaited</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">X</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">X</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">never</span><span style="color:#999999;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;">/**</span></span>
<span class="line"><span style="color:#A0ADA0;"> * 代码解读</span></span>
<span class="line"><span style="color:#A0ADA0;"> *  1. 我们传给 MyAwaited&lt;T&gt; 的 T 泛型限制了 必须是 Promise 的类型，这样就解决了  type error = MyAwaited&lt;number&gt;; 的爆红问题</span></span>
<span class="line"><span style="color:#A0ADA0;"> *  2. 在根据 T 限制了必须是 Promise 类型，所以这段代码 T extends Promise&lt;infer X&gt; ? Type1 : Type2  是一定会走 Type1的，因此 Type2 写什么类型都无所谓</span></span>
<span class="line"><span style="color:#A0ADA0;"> *  3. 进入到 Type1 后，先要理解下 Infer 关键字 在 条件类型 extends 的作用， Infer 是推断的意思，意思就是 假设 Promise&lt;T&gt; 里的泛型的类型 是 X 类型</span></span>
<span class="line"><span style="color:#A0ADA0;"> *  4. 然后问 X 类型 它是不是也是 Promise 类型 如果是 则进入 MyAwaited&lt;X&gt; 进行递归操作</span></span>
<span class="line"><span style="color:#A0ADA0;"> *  5. 如果不是Promise类型，则返回这个 X 类型</span></span>
<span class="line"><span style="color:#A0ADA0;"> */</span></span></code></pre></div><p>关键点</p><ul><li>Infer 关键字的理解使用</li></ul><h2 id="_03312-easy-parameters" tabindex="-1">03312-easy-parameters <a class="header-anchor" href="#_03312-easy-parameters" aria-label="Permalink to &quot;03312-easy-parameters&quot;">​</a></h2><p>实现内置的 Parameters 类型，就是获取 函数泛型 T 回调函数中的 参数类型</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">type</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">MyParameters</span><span style="color:#666666;">&lt;</span><span style="color:#5DA994;">T</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">extends</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(...</span><span style="color:#BD976A;">args</span><span style="color:#666666;">: </span><span style="color:#5DA994;">any</span><span style="color:#666666;">[])</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">any</span><span style="color:#666666;">&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">T</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">extends</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">...</span><span style="color:#BD976A;">args</span><span style="color:#666666;">: </span><span style="color:#CB7676;">infer</span><span style="color:#666666;"> </span><span style="color:#5DA994;">X</span></span>
<span class="line"><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">any</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">?</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">X</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#5DA994;">never</span><span style="color:#666666;">;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">type</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">MyParameters</span><span style="color:#999999;">&lt;</span><span style="color:#2E8F82;">T</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">extends</span><span style="color:#393A34;"> </span><span style="color:#999999;">(...</span><span style="color:#B07D48;">args</span><span style="color:#999999;">: </span><span style="color:#2E8F82;">any</span><span style="color:#999999;">[])</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">any</span><span style="color:#999999;">&gt;</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">T</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">extends</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">...</span><span style="color:#B07D48;">args</span><span style="color:#999999;">: </span><span style="color:#AB5959;">infer</span><span style="color:#999999;"> </span><span style="color:#2E8F82;">X</span></span>
<span class="line"><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">any</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">?</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">X</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">:</span><span style="color:#393A34;"> </span><span style="color:#2E8F82;">never</span><span style="color:#999999;">;</span></span></code></pre></div><p>关键点</p><ul><li>Infer 关键字的理解使用</li></ul>`,46),e=[o];function t(c,r,y,A,i,D){return n(),a("div",null,e)}const E=s(p,[["render",t]]);export{d as __pageData,E as default};
