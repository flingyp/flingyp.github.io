import{_ as a,c as s,o as e,X as n}from"./chunks/framework.12317601.js";const b=JSON.parse('{"title":"Git 随机","description":"","frontmatter":{},"headers":[],"relativePath":"notes/Git常用操作.md","filePath":"notes/Git常用操作.md"}'),l={name:"notes/Git常用操作.md"},o=n(`<h1 id="git-随机" tabindex="-1">Git 随机 <a class="header-anchor" href="#git-随机" aria-label="Permalink to &quot;Git 随机&quot;">​</a></h1><h2 id="git-本地仓库和远程仓库" tabindex="-1">Git 本地仓库和远程仓库 <a class="header-anchor" href="#git-本地仓库和远程仓库" aria-label="Permalink to &quot;Git 本地仓库和远程仓库&quot;">​</a></h2><p><strong>本地仓库</strong>：存放在本机中的仓库，每台计算机都有本地仓库，本地仓库又可以细分为三个概念，分别是工作区，暂存区和本地库。</p><p><strong>工作区</strong>：带.git 文件的文件夹就可以看做是一个工作区，也可以将写代码的地方看成工作区。</p><p><strong>暂存区</strong>：它是一个隐式的概念，工作区中的文件会添加到暂存区。</p><p><strong>本地库</strong>：本地库就是本地仓库中用于存放文件和版本管理的地方，暂存区会将文件提交到本地库当中。</p><p><strong>远程仓库</strong>：对于一个团队来说，每个成员都有自己的本地库，那之间怎么进行通信交互呢？就是通过远程仓库来通信交互的（A 将文件推送到远程仓库，B 可以从远程仓库上将 A 推送的文件拉取下来），大名鼎鼎的 github 就是一个远程仓库，中国的 gitee 码云也是一个远程仓库，企业中用的更多的其实是一个被称为 gitlab 的远程仓库。</p><h2 id="安装配置以及初始化配置" tabindex="-1">安装配置以及初始化配置 <a class="header-anchor" href="#安装配置以及初始化配置" aria-label="Permalink to &quot;安装配置以及初始化配置&quot;">​</a></h2><p>安装完成后可以通过 <code>git --version</code> 查看 Git 版本号</p><h3 id="初始化配置" tabindex="-1">初始化配置 <a class="header-anchor" href="#初始化配置" aria-label="Permalink to &quot;初始化配置&quot;">​</a></h3><p>配置文件为 <code>~/.gitconfig</code>，执行任何 Git 配置命令后文件将自动创建。</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">git</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">config</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C99076;">--global</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">user.email</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">xxxx</span><span style="color:#C98A7D99;">&quot;</span></span>
<span class="line"><span style="color:#80A665;">git</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">config</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C99076;">--global</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D;">user.name</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">xxx@xx.com</span><span style="color:#C98A7D99;">&quot;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">git</span><span style="color:#393A34;"> </span><span style="color:#B56959;">config</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">--global</span><span style="color:#393A34;"> </span><span style="color:#B56959;">user.email</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">xxxx</span><span style="color:#B5695999;">&quot;</span></span>
<span class="line"><span style="color:#59873A;">git</span><span style="color:#393A34;"> </span><span style="color:#B56959;">config</span><span style="color:#393A34;"> </span><span style="color:#A65E2B;">--global</span><span style="color:#393A34;"> </span><span style="color:#B56959;">user.name</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">xxx@xx.com</span><span style="color:#B5695999;">&quot;</span></span></code></pre></div><h2 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h2><ol><li>初始化仓库：<code>git init</code></li><li>克隆仓库：<code>git clone url</code></li><li>克隆指定分支：<code>git clone -b branch url</code></li><li>查看状态：<code>git status</code></li><li>提交单个文件：<code>git add file</code></li><li>提交所有文件：<code>git add .</code></li><li>提交暂存库文件到本地仓库：<code>git commit -m &#39;提示信息&#39;</code></li><li>删除版本库和项目目录中的文件：<code>git rm file</code></li><li>只删除版本库中文件但保存项目目录中文件：<code>git rm --cached file</code></li><li>修改最后一次提交信息：<code>git commit --amend</code></li><li>提交代码到远程仓库：<code>git push</code></li></ol><p><img src="https://p1-jj.byteimg.com/tos-cn-i-t2oaga2asx/gold-user-assets/2017/11/30/1600b0470bd30d66~tplv-t2oaga2asx-zoom-in-crop-mark:4536:0:0:0.awebp" alt=""></p><h2 id="分支管理" tabindex="-1">分支管理 <a class="header-anchor" href="#分支管理" aria-label="Permalink to &quot;分支管理&quot;">​</a></h2><p>分支一般是为了项目新建 Feature 或者修改 Bug 时使用</p><ol><li>创建分支：<code>git branch branch_name</code></li><li>切换分支：<code>git checkout branch_name</code></li><li>创建并切换分支：<code>git checkout -b branch_name</code></li><li>合并分支并且提交到主分支中：<code>git checkout main &amp; git merge branch_name</code></li><li>修改分支名称：<code>git branch -m old_name new_name</code></li><li>删除分支：<code>git branch -d branch_name</code></li><li>删除没有合并的分支：<code>git branch -D branch_name</code></li><li>删除远程分支：<code>git branch origin :branch_name</code></li><li>查看未合并的分支(切换到主分支)：<code>git branch --no-merged</code></li><li>查看已经合并的分支(切换到主分支)：<code>git branch --merged</code></li></ol><h2 id="历史版本" tabindex="-1">历史版本 <a class="header-anchor" href="#历史版本" aria-label="Permalink to &quot;历史版本&quot;">​</a></h2><ol><li>查看历史版本提交日志：<code>git log</code></li><li>切换到某个提交的 commit-id 历史版本：<code>git checkout commit-id</code></li><li>以某个历史版本创建分支：<code>git checkout commit-id branch_name</code></li></ol><h2 id="git-版本前进和回退" tabindex="-1">Git 版本前进和回退 <a class="header-anchor" href="#git-版本前进和回退" aria-label="Permalink to &quot;Git 版本前进和回退&quot;">​</a></h2><p>对于本地仓库而言，每一次提交的成功执行，就意味着一个新版本的生成，git 会将这些版本给保存起来。</p><p>首先需要查看版本详细信息，通过 git reflog 命令可以查看到所有版本的信息。第一列它会显示一个索引号，这个索引号其实是一个 hash 值，每个版本都会对应一个 hash 值，我们可以通过这个 hash 来进行版本的切换。</p><div class="tip custom-block"><p class="custom-block-title">选项</p><p>--hard 重置位置的同时，直接将 working Tree 工作目录、 index 暂存区及 repository 都重置成目标 Reset 节点的內容</p><p>--soft 重置位置的同时，保留 working Tree 工作目录和 index 暂存区的内容，只让 repository 中的内容和 reset 目标节点保持一致</p><p>--mixed（默认） 重置位置的同时，只保留 Working Tree 工作目录的內容，但会将 Index 暂存区 和 Repository 中的內容更改和 reset 目标节点一致</p></div><p>切换到指定的版本: <code>git reset --hard 索引号</code></p><h2 id="为远程仓库设置别名" tabindex="-1">为远程仓库设置别名 <a class="header-anchor" href="#为远程仓库设置别名" aria-label="Permalink to &quot;为远程仓库设置别名&quot;">​</a></h2><ul><li><code>git remote add &lt;alias_name&gt; &lt;HTTPS_URL|SSH_URL&gt;</code></li></ul><p>设置后可以通过 <code>git push -u alias_name main</code> 推送（本地当前分支）到远程仓库的 main 分支</p><h2 id="gitignore" tabindex="-1">.gitignore <a class="header-anchor" href="#gitignore" aria-label="Permalink to &quot;.gitignore&quot;">​</a></h2><p>用于定义忽略提交的文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#dbd7caee;"># Logs</span></span>
<span class="line"><span style="color:#dbd7caee;">logs</span></span>
<span class="line"><span style="color:#dbd7caee;">*.log</span></span>
<span class="line"><span style="color:#dbd7caee;">npm-debug.log*</span></span>
<span class="line"><span style="color:#dbd7caee;">yarn-debug.log*</span></span>
<span class="line"><span style="color:#dbd7caee;">yarn-error.log*</span></span>
<span class="line"><span style="color:#dbd7caee;">pnpm-debug.log*</span></span>
<span class="line"><span style="color:#dbd7caee;">lerna-debug.log*</span></span>
<span class="line"><span style="color:#dbd7caee;"></span></span>
<span class="line"><span style="color:#dbd7caee;">node_modules</span></span>
<span class="line"><span style="color:#dbd7caee;">dist</span></span>
<span class="line"><span style="color:#dbd7caee;">dist-ssr</span></span>
<span class="line"><span style="color:#dbd7caee;">*.local</span></span>
<span class="line"><span style="color:#dbd7caee;"></span></span>
<span class="line"><span style="color:#dbd7caee;"># Editor directories and files</span></span>
<span class="line"><span style="color:#dbd7caee;">.vscode/*</span></span>
<span class="line"><span style="color:#dbd7caee;">!.vscode/extensions.json</span></span>
<span class="line"><span style="color:#dbd7caee;">.idea</span></span>
<span class="line"><span style="color:#dbd7caee;">.DS_Store</span></span>
<span class="line"><span style="color:#dbd7caee;">*.suo</span></span>
<span class="line"><span style="color:#dbd7caee;">*.ntvs*</span></span>
<span class="line"><span style="color:#dbd7caee;">*.njsproj</span></span>
<span class="line"><span style="color:#dbd7caee;">*.sln</span></span>
<span class="line"><span style="color:#dbd7caee;">*.sw?</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#393a34;"># Logs</span></span>
<span class="line"><span style="color:#393a34;">logs</span></span>
<span class="line"><span style="color:#393a34;">*.log</span></span>
<span class="line"><span style="color:#393a34;">npm-debug.log*</span></span>
<span class="line"><span style="color:#393a34;">yarn-debug.log*</span></span>
<span class="line"><span style="color:#393a34;">yarn-error.log*</span></span>
<span class="line"><span style="color:#393a34;">pnpm-debug.log*</span></span>
<span class="line"><span style="color:#393a34;">lerna-debug.log*</span></span>
<span class="line"><span style="color:#393a34;"></span></span>
<span class="line"><span style="color:#393a34;">node_modules</span></span>
<span class="line"><span style="color:#393a34;">dist</span></span>
<span class="line"><span style="color:#393a34;">dist-ssr</span></span>
<span class="line"><span style="color:#393a34;">*.local</span></span>
<span class="line"><span style="color:#393a34;"></span></span>
<span class="line"><span style="color:#393a34;"># Editor directories and files</span></span>
<span class="line"><span style="color:#393a34;">.vscode/*</span></span>
<span class="line"><span style="color:#393a34;">!.vscode/extensions.json</span></span>
<span class="line"><span style="color:#393a34;">.idea</span></span>
<span class="line"><span style="color:#393a34;">.DS_Store</span></span>
<span class="line"><span style="color:#393a34;">*.suo</span></span>
<span class="line"><span style="color:#393a34;">*.ntvs*</span></span>
<span class="line"><span style="color:#393a34;">*.njsproj</span></span>
<span class="line"><span style="color:#393a34;">*.sln</span></span>
<span class="line"><span style="color:#393a34;">*.sw?</span></span></code></pre></div><h2 id="储藏-stashing" tabindex="-1">储藏 Stashing <a class="header-anchor" href="#储藏-stashing" aria-label="Permalink to &quot;储藏 Stashing&quot;">​</a></h2><p>当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点。</p><p>&quot;暂存&quot; 可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用。</p><ul><li>储藏工作: <code>git stash</code></li><li>查看储藏列表: <code>git stash list</code></li><li>应用最近的储藏: <code>git stash apply</code></li><li>应用更早的储藏: <code>git stash apply stash@{2}</code></li><li>删除储藏: <code>git stash drop stash@{0}</code></li><li>应用并删除储藏: <code>git stash pop</code></li></ul><h2 id="标签-tag" tabindex="-1">标签 Tag <a class="header-anchor" href="#标签-tag" aria-label="Permalink to &quot;标签 Tag&quot;">​</a></h2><p>Git 也可以对某一时间点上的版本打上标签 ，用于发布软件版本如 <code>v1.0.0</code>、<code>v1.1.0</code>、<code>v2.0.0</code></p><ul><li>添加标签：<code>git tag v1.0</code></li><li>列出标签：<code>git tag</code></li><li>推送标签：<code>git push --tags</code></li><li>删除标签：<code>git tag -d v1.0.1</code></li><li>删除远程标签：<code>git push origin :v1.0.1</code></li></ul><h2 id="ssh-的配置" tabindex="-1">SSH 的配置 <a class="header-anchor" href="#ssh-的配置" aria-label="Permalink to &quot;SSH 的配置&quot;">​</a></h2><ol><li><p>先检查下电脑是否配置了用户信息 <code>git config --global --list</code>，如果没有配置， 则执行一下命令进行配置</p></li><li><p>在本地电脑 通过 <code>git bash</code> 打开执行 <code>ssh-keygen -t rsa -C &quot;这里换上你的邮箱&quot;</code>，执行命令后直接回车 3 次即可，不需要去输入密码</p></li><li><p>可以通过 <code>cat ~/.ssh/id_rsa.pub</code> 查看生成的公钥 或者 在电脑的 C 盘/用户文件夹下 找到 .ssh 文件夹 打开可以看到 id_rsa 和 id_rsa.pub 的文件。 id_rsa.pub 是公钥文件</p></li><li><p>进入自己的 Github 到 Settings 找到 SSH and GPG keys 点击 New SSH key 按钮。 输入 title 和 公钥 Key 即可。</p></li></ol><h2 id="远程库相关命令" tabindex="-1">远程库相关命令 <a class="header-anchor" href="#远程库相关命令" aria-label="Permalink to &quot;远程库相关命令&quot;">​</a></h2><ul><li><code>git push &lt;别名/地址名&gt; &lt;分支名&gt;</code>： 推送本地库到远程库</li><li><code>git clone &lt;别名/地址名&gt;</code></li><li><code>git pull &lt;别名/远程库地址名&gt; &lt;远程库分支名&gt;</code>： 将远程库新增/修改内容拉取到本地库并合- 并</li><li><code>git fetch &lt;别名/远程库地址名&gt; &lt;远程库分支名&gt;</code>： 将远程库新增/修改内容拉取到本地库</li><li><code>git merge &lt;别名/远程分支名&gt;</code>： 将 fetch 下来的内容合并起来</li></ul><h2 id="npm-version-使用方法" tabindex="-1"><code>npm version</code> 使用方法 <a class="header-anchor" href="#npm-version-使用方法" aria-label="Permalink to &quot;\`npm version\` 使用方法&quot;">​</a></h2><h3 id="version" tabindex="-1">version <a class="header-anchor" href="#version" aria-label="Permalink to &quot;version&quot;">​</a></h3><p>每个包都有一个 <code>package.json</code>，如果要发布包的话，文件里面的<code>version</code> 字段就是决定发包的版本号了。</p><p><code>version</code> 字段是这样一个结构： <strong>0.0.1</strong>，是有三位的版本号。分别是对应的里面的：major、minor、 patch。</p><p>也就是说当发布大版本的时候会升级为 1.0.0，小版本是 0.1.0，一些小修复是 0.0.2。</p><h3 id="npm-version" tabindex="-1"><code>npm version</code> <a class="header-anchor" href="#npm-version" aria-label="Permalink to &quot;\`npm version\`&quot;">​</a></h3><p>为了更改版本号，npm 有 npm version 这个命令来自动更改版本号，同时帮忙 commit。比如说 当前版本是 1.1.1，当执行 <code>npm version patch -m &#39;[patch]&#39;</code> 的时候，会自动把版本改为 1.1.2，同时 会多出一个 <code>commit</code>，这次改动便是更改 package.json 文件。</p><p>如果执行了 <code>prepatch</code>，版本号会从 1.1.1 变成 1.1.2-0</p><h3 id="相关版本" tabindex="-1">相关版本 <a class="header-anchor" href="#相关版本" aria-label="Permalink to &quot;相关版本&quot;">​</a></h3><table><thead><tr><th style="text-align:center;">npm version</th><th style="text-align:center;">功能</th></tr></thead><tbody><tr><td style="text-align:center;">major</td><td style="text-align:center;">如果没有预发布号，则直接升级一位大号，其他位都置为 0。如果有预发布号：1. 中号和小号都为 0，则不升级大号，而将预发布号删掉。即 2.0.0-1 变成 2.0.0，这就是预发布的作用。2. 如果中号和小号有任意一个不是 0，那边会升级一位大号，其他位都置为 0，清空预发布号。即 2.0.1-0 变成 3.0.0</td></tr><tr><td style="text-align:center;">minor</td><td style="text-align:center;">如果没有预发布号，则升级一位中号，大号不动，小号置为空。如果有预发布号：1. 如果小号为 0，则不升级中号，将预发布号去掉。2. 如果小号不为 0，同理没有预发布号</td></tr><tr><td style="text-align:center;">patch</td><td style="text-align:center;">如果没有预发布号：直接升级小号，去掉预发布号。如果有预发布号：去掉预发布号，其他不动</td></tr><tr><td style="text-align:center;">premajor</td><td style="text-align:center;">直接升级大号，中号和小号置为 0，增加预发布号为 0</td></tr><tr><td style="text-align:center;">preminor</td><td style="text-align:center;">直接升级中号，小号置为 0，增加预发布号为 0</td></tr><tr><td style="text-align:center;">prepatch</td><td style="text-align:center;">直接升级小号，增加预发布号为 0</td></tr><tr><td style="text-align:center;">prerelease</td><td style="text-align:center;">如果没有预发布号：增加小号，增加预发布号为 0。如果有预发布号，则升级预发布号</td></tr></tbody></table>`,52),t=[o];function c(i,p,r,d,g,h){return e(),s("div",null,t)}const m=a(l,[["render",c]]);export{b as __pageData,m as default};
