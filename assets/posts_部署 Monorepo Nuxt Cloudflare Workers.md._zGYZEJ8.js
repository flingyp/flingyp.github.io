import{_ as i,c as a,o as e,as as l}from"./chunks/framework.B-x_5eXW.js";const c=JSON.parse('{"title":"部署 Monorepo 中的 Nuxt 项目到 Cloudflare Workers","description":"","frontmatter":{},"headers":[],"relativePath":"posts/部署 Monorepo Nuxt Cloudflare Workers.md","filePath":"posts/部署 Monorepo Nuxt Cloudflare Workers.md","lastUpdated":1758165179000}'),n={name:"posts/部署 Monorepo Nuxt Cloudflare Workers.md"};function t(p,s,o,h,d,r){return e(),a("div",null,s[0]||(s[0]=[l(`<h1 id="部署-monorepo-中的-nuxt-项目到-cloudflare-workers" tabindex="-1">部署 Monorepo 中的 Nuxt 项目到 Cloudflare Workers <a class="header-anchor" href="#部署-monorepo-中的-nuxt-项目到-cloudflare-workers" aria-label="Permalink to &quot;部署 Monorepo 中的 Nuxt 项目到 Cloudflare Workers&quot;">​</a></h1><p>本教程将指导你将 Monorepo 结构中位于 <code>apps/web</code> 文件夹的 Nuxt 项目部署到 Cloudflare Workers 平台。Cloudflare Workers 是一个边缘计算平台，适合运行 Nuxt 的服务器端渲染 (SSR) 应用。本教程假设你对 Nuxt 和 Monorepo 有基本了解，但无需熟悉 Cloudflare Workers。</p><h2 id="前提条件" tabindex="-1">前提条件 <a class="header-anchor" href="#前提条件" aria-label="Permalink to &quot;前提条件&quot;">​</a></h2><ul><li><strong>Node.js</strong>: 安装 Node.js 18.x 或更高版本（推荐通过 <code>nvm</code> 管理）。</li><li><strong>Cloudflare 账户</strong>: 在 <a href="https://dash.cloudflare.com" target="_blank" rel="noreferrer">Cloudflare 官网</a> 注册并登录。</li><li><strong>Wrangler CLI</strong>: Cloudflare 的命令行工具，用于部署 Workers。</li><li><strong>Git</strong>: 项目已托管在 GitHub 或 GitLab（可选，但推荐）。</li><li><strong>Monorepo 结构</strong>: Nuxt 项目位于 <code>apps/web</code> 文件夹。</li></ul><h2 id="步骤-1-安装-wrangler-cli" tabindex="-1">步骤 1: 安装 Wrangler CLI <a class="header-anchor" href="#步骤-1-安装-wrangler-cli" aria-label="Permalink to &quot;步骤 1: 安装 Wrangler CLI&quot;">​</a></h2><p>Wrangler 是 Cloudflare Workers 的命令行工具，用于构建和部署项目。</p><ol><li>全局安装 Wrangler：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -g</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wrangler</span></span></code></pre></div></li><li>验证安装：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wrangler</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --version</span></span></code></pre></div>确保输出类似 <code>wrangler 3.x.x</code>。</li><li>登录 Cloudflare 账户：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wrangler</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> login</span></span></code></pre></div>这会打开浏览器授权 Wrangler 访问你的 Cloudflare 账户。完成后返回终端。</li></ol><h2 id="步骤-2-配置-nuxt-项目" tabindex="-1">步骤 2: 配置 Nuxt 项目 <a class="header-anchor" href="#步骤-2-配置-nuxt-项目" aria-label="Permalink to &quot;步骤 2: 配置 Nuxt 项目&quot;">​</a></h2><p>确保你的 Nuxt 项目（位于 <code>apps/web</code>）适配 Cloudflare Workers 环境。Nuxt 的 Nitro 引擎支持 <code>cloudflare</code> 预设，我们需要配置它。</p><ol><li><strong>进入 Nuxt 项目目录</strong>：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">cd</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> apps/web</span></span></code></pre></div></li><li><strong>检查 <code>nuxt.config.ts</code></strong>： 编辑 <code>apps/web/nuxt.config.ts</code>，确保指定 Cloudflare Workers 的 Nitro 预设：<div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">export</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> default</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> defineNuxtConfig</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  nitro: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    preset: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;cloudflare&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div></li><li><strong>安装依赖</strong>： 在 <code>apps/web</code> 目录运行：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> install</span></span></code></pre></div>确保项目依赖已安装，特别是 <code>@nuxt/kit</code> 和 <code>nitro</code> 相关依赖。</li><li><strong>测试本地构建</strong>： 在 <code>apps/web</code> 目录运行：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div>这会生成 <code>.output</code> 文件夹，包含适配 Cloudflare Workers 的构建产物（通常在 <code>.output/server/index.mjs</code> 和 <code>.output/public</code>）。</li></ol><h2 id="步骤-3-配置-wrangler" tabindex="-1">步骤 3: 配置 Wrangler <a class="header-anchor" href="#步骤-3-配置-wrangler" aria-label="Permalink to &quot;步骤 3: 配置 Wrangler&quot;">​</a></h2><p>Cloudflare Workers 使用 <code>wrangler.toml</code> 文件定义部署配置。我们需要在 <code>apps/web</code> 目录中创建并验证它。</p><ol><li><p><strong>创建 <code>wrangler.toml</code></strong>： 在 <code>apps/web</code> 目录运行：</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wrangler</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> init</span></span></code></pre></div><p>按提示选择：</p><ul><li>是否创建新的 Workers 项目？选择 <code>y</code>。</li><li>是否使用 TypeScript？选择 <code>n</code>（保持简单）。</li><li>是否绑定其他资源（如 KV、D1）？暂时选择 <code>n</code>。</li></ul><p>这会在 <code>apps/web</code> 目录生成 <code>wrangler.toml</code> 文件。</p></li><li><p><strong>编辑 <code>wrangler.toml</code></strong>： 打开 <code>apps/web/wrangler.toml</code>，配置如下：</p><div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">name = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nuxt-monorepo-web&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">compatibility_date = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;2025-08-23&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">main = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.output/server/index.mjs&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">site</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">bucket = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;.output/public&quot;</span></span></code></pre></div><ul><li><code>name</code>: 项目名称，需唯一（建议包含项目名，如 <code>nuxt-monorepo-web</code>）。</li><li><code>compatibility_date</code>: 设置为当前日期（格式：YYYY-MM-DD）。</li><li><code>main</code>: 指向 Nuxt 构建的入口文件（通常是 <code>.output/server/index.mjs</code>）。</li><li><code>[site].bucket</code>: 指向静态资源目录（通常是 <code>.output/public</code>）。</li></ul></li><li><p><strong>验证配置</strong>：</p><ul><li>运行构建命令确认产物：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">ls</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -la</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> .output</span></span></code></pre></div>确认 <code>.output/server/index.mjs</code> 和 <code>.output/public</code> 存在。</li><li>运行本地开发服务器测试配置：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wrangler</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre></div>访问 <code>http://localhost:8787</code>，检查页面是否正常加载。</li><li>模拟部署检查配置：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wrangler</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> --dry-run</span></span></code></pre></div>如果有错误，Wrangler 会提示问题（如文件路径错误）。</li></ul></li></ol><h2 id="步骤-4-构建并部署" tabindex="-1">步骤 4: 构建并部署 <a class="header-anchor" href="#步骤-4-构建并部署" aria-label="Permalink to &quot;步骤 4: 构建并部署&quot;">​</a></h2><p>现在可以构建 Nuxt 项目并部署到 Cloudflare Workers。</p><ol><li><strong>构建项目</strong>： 在 <code>apps/web</code> 目录运行：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span></span></code></pre></div></li><li><strong>本地预览（可选）</strong>： 使用 Wrangler 模拟 Workers 环境：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wrangler</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> dev</span></span></code></pre></div>在浏览器访问 <code>http://localhost:8787</code>，测试页面加载是否正常。</li><li><strong>部署到 Cloudflare Workers</strong>： 运行以下命令部署项目：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">wrangler</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> publish</span></span></code></pre></div>部署成功后，Wrangler 会返回一个 URL（如 <code>https://nuxt-monorepo-web.&lt;your-account&gt;.workers.dev</code>）。访问该 URL 检查部署结果。</li></ol><h2 id="步骤-5-配置-monorepo-工作流" tabindex="-1">步骤 5: 配置 Monorepo 工作流 <a class="header-anchor" href="#步骤-5-配置-monorepo-工作流" aria-label="Permalink to &quot;步骤 5: 配置 Monorepo 工作流&quot;">​</a></h2><p>由于项目是 Monorepo 结构，需调整工作流以确保只构建和部署 <code>apps/web</code>。</p><ol><li><strong>更新 <code>package.json</code></strong>： 在 <code>apps/web/package.json</code> 中添加部署脚本：<div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nuxt build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;nuxt dev&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;deploy&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;wrangler publish&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li><li><strong>Monorepo 工具支持</strong>： 如果使用 <code>pnpm</code>, <code>yarn</code>, 或 <code>turborepo</code> 管理 Monorepo，在根目录的 <code>package.json</code> 中添加工作流脚本：<div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;scripts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;build:web&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cd apps/web &amp;&amp; npm run build&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;deploy:web&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cd apps/web &amp;&amp; npm run deploy&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div>运行：<div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build:web</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> deploy:web</span></span></code></pre></div></li><li><strong>GitHub Actions（可选）</strong>： 为自动化部署，在 Monorepo 根目录创建 <code>.github/workflows/deploy.yml</code>：<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Deploy Nuxt to Cloudflare Workers</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  push</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    branches</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">jobs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  deploy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    runs-on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ubuntu-latest</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">    steps</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/checkout@v4</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">uses</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">actions/setup-node@v4</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          node-version</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">18</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm install</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">npm run build:web</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Publish to Cloudflare</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">cd apps/web &amp;&amp; npx wrangler publish</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">        env</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">          CLOUDFLARE_API_TOKEN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\${{ secrets.CLOUDFLARE_API_TOKEN }}</span></span></code></pre></div><ul><li>在 Cloudflare 仪表板生成 API Token（需 Workers 权限）。</li><li>在 GitHub 仓库的 Settings &gt; Secrets 中添加 <code>CLOUDFLARE_API_TOKEN</code>。</li></ul></li></ol><h2 id="步骤-6-常见问题与解决方法" tabindex="-1">步骤 6: 常见问题与解决方法 <a class="header-anchor" href="#步骤-6-常见问题与解决方法" aria-label="Permalink to &quot;步骤 6: 常见问题与解决方法&quot;">​</a></h2><ul><li><strong>问题 1: 部署后页面返回 500 错误</strong>： <ul><li>检查 <code>.output/server/index.mjs</code> 是否生成。运行 <code>npm run build</code> 确认。</li><li>确保 <code>wrangler.toml</code> 中的 <code>main</code> 和 <code>bucket</code> 路径正确。</li><li>查看日志：<code>wrangler publish --verbose</code> 或 <code>wrangler tail</code>。</li></ul></li><li><strong>问题 2: API 路由（如 <code>/api/*</code>）不工作</strong>： <ul><li>确认 <code>nuxt.config.ts</code> 使用了 <code>cloudflare</code> 预设。</li><li>检查是否使用了不兼容的模块（如 <code>node:crypto</code>），可能需用 <code>unenv</code> 兼容替代方案。</li></ul></li><li><strong>问题 3: Monorepo 依赖问题</strong>： <ul><li>确保 <code>apps/web</code> 的 <code>package.json</code> 包含所有必要依赖。</li><li>如果使用 <code>pnpm</code>，运行 <code>pnpm install --filter ./apps/web</code> 只安装 <code>apps/web</code> 依赖。</li></ul></li><li><strong>问题 4: 静态资源未加载</strong>： <ul><li>确认 <code>[site].bucket</code> 指向正确的静态资源目录（<code>.output/public</code>）。</li><li>检查 Workers 是否启用了静态资源服务。</li></ul></li></ul><h2 id="步骤-7-优化与扩展" tabindex="-1">步骤 7: 优化与扩展 <a class="header-anchor" href="#步骤-7-优化与扩展" aria-label="Permalink to &quot;步骤 7: 优化与扩展&quot;">​</a></h2><ul><li><strong>自定义域名</strong>： 在 Cloudflare 仪表板为 Workers 项目绑定自定义域名： <ol><li>进入 Workers 项目 &gt; “Triggers” &gt; “Custom Domains”。</li><li>添加域名并配置 DNS 记录（通常是 CNAME）。</li></ol></li><li><strong>添加存储或数据库</strong>： 如果需要持久化存储： <ul><li><strong>Cloudflare KV（键值存储）</strong>：<div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">kv_namespaces</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">binding = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MY_KV&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">id = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;your-kv-id&gt;&quot;</span></span></code></pre></div></li><li><strong>Cloudflare D1（SQL 数据库）</strong>：<div class="language-toml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">toml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[[</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">d1_databases</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">binding = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MY_D1&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">database_name = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;your-database-name&gt;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">database_id = </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;&lt;your-database-id&gt;&quot;</span></span></code></pre></div></li><li>在 <code>nuxt.config.ts</code> 中通过 <code>process.env</code> 访问绑定。</li></ul></li><li><strong>性能优化</strong>： <ul><li>启用 Cloudflare 缓存（在仪表板配置）。</li><li>使用 Nuxt 的 <code>useAsyncData</code> 和 <code>useFetch</code> 优化数据加载。</li><li>考虑将静态资源托管到 Cloudflare R2，减少 Workers 负载。</li></ul></li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>通过以上步骤，你已成功将 Monorepo 中的 Nuxt 项目（位于 <code>apps/web</code>）部署到 Cloudflare Workers。关键点包括：</p><ul><li>配置 <code>nuxt.config.ts</code> 使用 <code>cloudflare</code> 预设。</li><li>设置 <code>wrangler.toml</code> 指定入口文件和静态资源。</li><li>使用 <code>wrangler dev</code> 和 <code>wrangler publish --dry-run</code> 验证配置。</li><li>针对 Monorepo 结构调整工作流（如 <code>package.json</code> 脚本或 GitHub Actions）。</li></ul><p>如果遇到问题，参考 <a href="https://developers.cloudflare.com/workers/" target="_blank" rel="noreferrer">Cloudflare Workers 文档</a> 或 <a href="https://nuxt.com/docs/getting-started/deployment" target="_blank" rel="noreferrer">Nuxt 部署指南</a>。需要进一步帮助？请提供你的 <code>nuxt.config.ts</code> 或具体错误信息，我可以帮你排查！</p>`,27)]))}const g=i(n,[["render",t]]);export{c as __pageData,g as default};
