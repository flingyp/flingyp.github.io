import{_ as i,c as a,o as l,ag as n}from"./chunks/framework.BhcQuJV0.js";const o=JSON.parse('{"title":"Node.js","description":"","frontmatter":{},"headers":[],"relativePath":"backend/Node/Interview.md","filePath":"backend/Node/Interview.md","lastUpdated":1752478107000}'),h={name:"backend/Node/Interview.md"};function e(k,s,t,p,d,E){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="node-js" tabindex="-1">Node.js <a class="header-anchor" href="#node-js" aria-label="Permalink to &quot;Node.js&quot;">​</a></h1><h2 id="_01-nodejs-是什么-它的优势是什么" tabindex="-1">01. NodeJS 是什么，它的优势是什么 <a class="header-anchor" href="#_01-nodejs-是什么-它的优势是什么" aria-label="Permalink to &quot;01. NodeJS 是什么，它的优势是什么&quot;">​</a></h2><p>NodeJS 是一个基于 <strong>​Chrome V8 引擎</strong> 的 ​JavaScript <strong>运行时环境</strong>。采用了 <strong>事件驱动</strong>、<strong>非阻塞 I/O 模型</strong>，使其轻量且高效，特别适合处理高并发的网络应用。</p><p>核心特点是：</p><ol><li>​JavaScript 运行时：可以在服务器端运行 JavaScript，统一前后端开发语言。</li><li>​事件驱动：通过事件循环机制处理异步操作。</li><li>非阻塞 I/O：I/O 操作不会阻塞主线程，适合处理大量并发请求。</li><li>单线程：Node.js 是单线程的，但通过事件循环和异步 I/O 实现高并发。</li></ol><p>NodeJS 优势就是 ：高性能、跨平台、生态系统丰富、轻量级、易学</p><p>NodeJS 局限性</p><ol><li>Node.js 是单线程的，虽然可以通过事件循环处理大量并发请求，但如果主线程被阻塞（例如死循环或长时间运行的同步任务），整个应用都会受到影响。</li><li>因为 Node.js 的单线程特性，不适合做 CPU 密集型的任务，比如图像处理、视频编码等。</li></ol><h2 id="_02-nodejs-环境和浏览器的区别是什么" tabindex="-1">02. NodeJS 环境和浏览器的区别是什么 <a class="header-anchor" href="#_02-nodejs-环境和浏览器的区别是什么" aria-label="Permalink to &quot;02. NodeJS 环境和浏览器的区别是什么&quot;">​</a></h2><ol><li>运行环境和用途不一样</li></ol><ul><li>浏览器：用于渲染网页、处理用户交互，执行前端 JavaScript（如 DOM 操作、事件处理）</li><li>NodeJS：用于服务器端开发（如后端服务、文件操作、数据库交互），基于 V8 引擎，但扩展了系统级 API（如文件系统、网络模块）</li></ul><ol start="2"><li>全局对象不一样</li></ol><ul><li>浏览器：全局对象是 <code>window</code></li><li>NodeJS：全局对象是 <code>global</code></li></ul><ol start="3"><li>模块系统不一样</li></ol><ul><li>浏览器只支持 ESM</li><li>NodeJS：支持CJS和ESM</li></ul><ol start="4"><li>事件循环实现的差异也不一样</li></ol><ul><li>浏览器：事件循环基于 ​HTML5 规范，包含宏任务（如 <code>setTimeout</code>）和微任务（如 <code>Promise</code>）。 与渲染引擎（如重绘、回流）协同工作。</li><li>NodeJS：事件循环分为多个阶段（如 <code>poll</code>、<code>check</code>、<code>timers</code>），由 <code>​libuv</code> 库实现。无渲染相关任务，但支持更复杂的异步 I/O 操作。</li></ul><h2 id="_03-nodejs-的事件循环机制是什么" tabindex="-1">03. NodeJS 的事件循环机制是什么 <a class="header-anchor" href="#_03-nodejs-的事件循环机制是什么" aria-label="Permalink to &quot;03. NodeJS 的事件循环机制是什么&quot;">​</a></h2><p>Node.js 的事件循环分为 ​六个阶段，每个阶段执行特定的任务，并按顺序循环执行</p><ol><li>Timers（定时器阶段）</li></ol><ul><li>执行 <code>setTimeout()</code> 和 <code>setInterval()</code> 的回调。</li><li>检查当前时间是否满足定时器的阈值，若满足则执行回调。</li></ul><ol start="2"><li>Pending I/O Callbacks（待定 I/O 回调阶段）​</li></ol><ul><li>执行上一轮循环中未处理的 ​系统级回调​（如 TCP 错误、文件操作错误等）。</li></ul><ol start="3"><li>​Idle/Prepare（闲置阶段）​</li></ol><ul><li>Node.js 内部使用的阶段，开发者无需关注。</li></ul><ol start="4"><li>Poll（轮询阶段）</li></ol><ul><li>核心阶段，主要处理 I/O 相关回调（如文件读取、网络请求）。</li><li>执行流程： <ul><li>检查是否有到期的定时器（Timers），若有则跳转到 ​Timers 阶段。</li><li>执行 Poll 队列中的 I/O 回调（如 fs.readFile 的回调）。</li><li>若 Poll 队列为空： <ul><li>如果有 setImmediate() 回调，进入 ​Check 阶段。</li><li>否则，等待新的 I/O 事件（阻塞在此阶段）。</li></ul></li></ul></li></ul><ol start="5"><li>Check（检查阶段）</li></ol><ul><li>执行 <code>setImmediate()</code> 的回调（优先级高于 <code>setTimeout(fn, 0)</code>）。</li></ul><ol start="6"><li>Close Callbacks（关闭回调阶段）</li></ol><ul><li>执行 <code>close</code> 事件的回调（如 <code>socket.on(&#39;close&#39;, ...)</code>）。</li></ul><h3 id="微任务的执行时机" tabindex="-1">微任务的执行时机 <a class="header-anchor" href="#微任务的执行时机" aria-label="Permalink to &quot;微任务的执行时机&quot;">​</a></h3><p>微任务（如 <code>Promise.then()</code>、<code>process.nextTick()</code>）​不属于事件循环的任一阶段，而是在以下时机执行：</p><ul><li>每个阶段切换时：在事件循环的每个阶段结束后，会清空微任务队列。</li><li><code>process.nextTick()</code> 优先级最高，在当前操作完成后会立即执行</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> fs</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;fs&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">fs.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">readFile</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;file.txt&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setTimeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Timeout&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">), </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  setImmediate</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Immediate&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">nextTick</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(() </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;nextTick&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 输出顺序：nextTick → Immediate → Timeout</span></span></code></pre></div><h2 id="_04-process-对象是什么-用来做什么的" tabindex="-1">04. <code>process</code> 对象是什么，用来做什么的 <a class="header-anchor" href="#_04-process-对象是什么-用来做什么的" aria-label="Permalink to &quot;04. \`process\` 对象是什么，用来做什么的&quot;">​</a></h2><p><code>process</code> 是一个全局对象，提供了与当前 Node.js 进程相关的信息和操作。它是 Node.js 核心 API 的一部分，无需通过 <code>require</code> 引入即可直接使用</p><ul><li>环境变量 <code>process.env</code></li><li>命令行参数：<code>process.argv</code></li><li>内存使用状况：<code>process.memoryUsage()</code></li><li>CPU 占用情况：<code>process.cpuUsage()</code></li></ul><h2 id="_05-child-process-模块如何创建子进程" tabindex="-1">05. <code>child_process</code> 模块如何创建子进程 <a class="header-anchor" href="#_05-child-process-模块如何创建子进程" aria-label="Permalink to &quot;05. \`child_process\` 模块如何创建子进程&quot;">​</a></h2><ul><li><code>child_process.spawn()</code> 最基本的创建子进程方法，适合长时间运行的进程</li><li><code>child_process.exec()</code> 适合执行简单命令并获取所有输出</li><li><code>child_process.execFile()</code> 类似 <code>exec()</code> 但直接执行文件而不是通过 shell。</li><li><code>child_process.fork()</code> 专门用于创建子进程，适合通信和共享内存</li></ul><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">spawn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;child_process&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 创建子进程</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> child</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> spawn</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;ls&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-lh&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;/usr&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 监听标准输出</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">child.stdout.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`stdout: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 监听标准错误</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">child.stderr.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;data&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">data</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">error</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`stderr: \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">data</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 监听退出事件</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">child.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;close&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">code</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">\`子进程退出，退出码 \${</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">code</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">}\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>使用 <code>fork()</code> 创建子进程可以通过 <code>send()</code> 和 <code>message()</code> 事件进行通信</p><p>父进程 <code>parent.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> { </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">fork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> } </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> require</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;child_process&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> child</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> fork</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;./child.js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">child.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello from parent&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">child.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Parent received:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, msg);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div><p>子进程 <code>child.js</code></p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">on</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;message&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, (</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">msg</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Child received:&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, msg);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  process.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">send</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">({ message: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;Hello from child&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">});</span></span></code></pre></div>`,46)]))}const c=i(h,[["render",e]]);export{o as __pageData,c as default};
