import{_ as s,c as n,o as a,X as l}from"./chunks/framework.12317601.js";const d=JSON.parse('{"title":"Python多线程","description":"","frontmatter":{"title":"Python多线程","tags":["Python"],"categories":["记录学习-成长"]},"headers":[],"relativePath":"services/Python/Python多线程.md","filePath":"services/Python/Python多线程.md"}'),p={name:"services/Python/Python多线程.md"},o=l(`<h2 id="多任务" tabindex="-1">多任务 <a class="header-anchor" href="#多任务" aria-label="Permalink to &quot;多任务&quot;">​</a></h2><ol><li>多任务介绍</li></ol><p>例如： 百度网盘同时下载多个文件或视频。</p><p>好处： 充分利用 CPU 资源，提高程序的执行效率</p><ol start="2"><li>多任务 2 种表现形式</li></ol><ul><li>并发 （在一段时间内 交替 去执行多个任务）</li></ul><p>例子： 对于单核 cpu 处理多任务，操作系统会轮流让各个任务<strong>交替执行</strong></p><ul><li>并行 (同时执行多个任务)</li></ul><h2 id="多进程" tabindex="-1">多进程 <a class="header-anchor" href="#多进程" aria-label="Permalink to &quot;多进程&quot;">​</a></h2><ol><li><p>进程</p><ul><li>通俗理解： 一个正在进行的程序就是一个进程。例如：正在允许的 QQ 或 微信。</li></ul></li><li><p>多进程</p><ol><li><p>程序运行会默认创建一个进程，这个默认创建的进程称为 <strong>主进程</strong></p></li><li><p>程序运行后又创建一个进程，这个称为 <strong>子进程</strong></p></li></ol></li><li><p>多进程完成多任务</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4C9A91;">1</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;"> 导入进程包</span></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> multiprocessing</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4C9A91;">2</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;"> 通过进程类创建进程对象</span></span>
<span class="line"><span style="color:#DBD7CAEE;">进程对象xxx </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> multiprocessing</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">Process</span><span style="color:#666666;">(</span><span style="color:#BD976A;">target</span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;">任务名</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[</span><span style="color:#DBD7CAEE;">args</span><span style="color:#666666;">]</span><span style="color:#CB7676;">|</span><span style="color:#666666;">[</span><span style="color:#DBD7CAEE;">kwargs</span><span style="color:#666666;">],</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[</span><span style="color:#DBD7CAEE;">name</span><span style="color:#666666;">],</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[</span><span style="color:#DBD7CAEE;">group</span><span style="color:#666666;">])</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    args 进行执行需要携带参数时。（以元组的方式给任务传参）</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    kwargs 进行执行需要携带参数时。（以字典的方式给任务传参）</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    name 进程名，一般不用设置</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    group 进程组，目前只能使用None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4C9A91;">3</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;"> 启动进程执行任务</span></span>
<span class="line"><span style="color:#DBD7CAEE;">进程对象xxx</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">start</span><span style="color:#666666;">()</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#2F798A;">1</span><span style="color:#999999;">.</span><span style="color:#393A34;"> 导入进程包</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> multiprocessing</span></span>
<span class="line"></span>
<span class="line"><span style="color:#2F798A;">2</span><span style="color:#999999;">.</span><span style="color:#393A34;"> 通过进程类创建进程对象</span></span>
<span class="line"><span style="color:#393A34;">进程对象xxx </span><span style="color:#999999;">=</span><span style="color:#393A34;"> multiprocessing</span><span style="color:#999999;">.</span><span style="color:#393A34;">Process</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">=</span><span style="color:#393A34;">任务名</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#393A34;">args</span><span style="color:#999999;">]</span><span style="color:#AB5959;">|</span><span style="color:#999999;">[</span><span style="color:#393A34;">kwargs</span><span style="color:#999999;">],</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#393A34;">name</span><span style="color:#999999;">],</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#393A34;">group</span><span style="color:#999999;">])</span></span>
<span class="line"><span style="color:#393A34;">    args 进行执行需要携带参数时。（以元组的方式给任务传参）</span></span>
<span class="line"><span style="color:#393A34;">    kwargs 进行执行需要携带参数时。（以字典的方式给任务传参）</span></span>
<span class="line"><span style="color:#393A34;">    name 进程名，一般不用设置</span></span>
<span class="line"><span style="color:#393A34;">    group 进程组，目前只能使用None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#2F798A;">3</span><span style="color:#999999;">.</span><span style="color:#393A34;"> 启动进程执行任务</span></span>
<span class="line"><span style="color:#393A34;">进程对象xxx</span><span style="color:#999999;">.</span><span style="color:#393A34;">start</span><span style="color:#999999;">()</span></span></code></pre></div></li><li><p>关于进程编号</p><ul><li>进程编号的作用： 当程序的数量越来越多时，如果没有办法区分主进程和子进程还有不同的子进程， 那么就无法进行有效的进程管理，为了方便管理实际上每个进程都是有自己的编号。</li></ul><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4C9A91;">1</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;"> 获取当前进程编号</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">pid </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> os</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">getpid</span><span style="color:#666666;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4C9A91;">2</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;"> 获取当前父进程编号 （创建进程的 父进程）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">ppid </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> os</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">getppid</span><span style="color:#666666;">()</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#2F798A;">1</span><span style="color:#999999;">.</span><span style="color:#393A34;"> 获取当前进程编号</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">pid </span><span style="color:#999999;">=</span><span style="color:#393A34;"> os</span><span style="color:#999999;">.</span><span style="color:#393A34;">getpid</span><span style="color:#999999;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#2F798A;">2</span><span style="color:#999999;">.</span><span style="color:#393A34;"> 获取当前父进程编号 （创建进程的 父进程）</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">ppid </span><span style="color:#999999;">=</span><span style="color:#393A34;"> os</span><span style="color:#999999;">.</span><span style="color:#393A34;">getppid</span><span style="color:#999999;">()</span></span></code></pre></div></li><li><p>多进程的注意点</p><ul><li>主进程会等待使用子进程执行结合再结束</li></ul><p>现在我们要 <strong>主进程退出后，子进程直接销毁，不再执行子进程的代码</strong>。 我们需要设置 <strong>守护主进程</strong>。 只需要给 子进程下的 daemon 的属性设置为 True 即可。</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#758575DD;"># 创建 子进程 后</span></span>
<span class="line"><span style="color:#DBD7CAEE;">xxx </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> multiprocessing</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">Process</span><span style="color:#666666;">(</span><span style="color:#BD976A;">target</span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;">任务名</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;"># 设置 守护主进程</span></span>
<span class="line"><span style="color:#DBD7CAEE;">xxx</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">daemon </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#758575DD;"># 启动进程</span></span>
<span class="line"><span style="color:#DBD7CAEE;">xxx</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">start</span><span style="color:#666666;">()</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;"># 创建 子进程 后</span></span>
<span class="line"><span style="color:#393A34;">xxx </span><span style="color:#999999;">=</span><span style="color:#393A34;"> multiprocessing</span><span style="color:#999999;">.</span><span style="color:#393A34;">Process</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">=</span><span style="color:#393A34;">任务名</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;"># 设置 守护主进程</span></span>
<span class="line"><span style="color:#393A34;">xxx</span><span style="color:#999999;">.</span><span style="color:#393A34;">daemon </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">True</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A0ADA0;"># 启动进程</span></span>
<span class="line"><span style="color:#393A34;">xxx</span><span style="color:#999999;">.</span><span style="color:#393A34;">start</span><span style="color:#999999;">()</span></span></code></pre></div></li></ol><h2 id="多线程" tabindex="-1">多线程 <a class="header-anchor" href="#多线程" aria-label="Permalink to &quot;多线程&quot;">​</a></h2><ol><li><p>线程</p><p>线程是<strong>程序执行最小单位</strong>， 实际上进程只负责分配资源， 而利用这些资源执行程序的是线程， 也就是说进程是线程的容器， <strong>一个进程中最少有一个线程来</strong>负责执行程序，同时线程自己不拥有系统资源， 只需要一点儿再运行中必不可少的资源，但它可与同属一个进程的其他线程<strong>共享进程所用有的全部资源</strong>。 这就像一个 QQ 软件（一个进程）打开两个窗口（两个线程）和两个人聊天一样， 实现多任务的同时也节省了资源。</p></li><li><p>多线程的作用</p><ul><li><p>在进程中默认会有一个线程用来执行程序， 这个线程称为<strong>主线程</strong></p></li><li><p>在进程中创建一个新的线程，这个线程称为<strong>子线程</strong></p></li></ul></li><li><p>多线程实现多任务</p><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4C9A91;">1</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;"> 导入线程模块</span></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> threading</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4C9A91;">2</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;"> 通过线程类创建线程对象</span></span>
<span class="line"><span style="color:#DBD7CAEE;">线程对象xxx </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> threading</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">Thread</span><span style="color:#666666;">(</span><span style="color:#BD976A;">target</span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;">任务名</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[</span><span style="color:#DBD7CAEE;">args</span><span style="color:#666666;">]</span><span style="color:#CB7676;">|</span><span style="color:#666666;">[</span><span style="color:#DBD7CAEE;">kwargs</span><span style="color:#666666;">],</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[</span><span style="color:#DBD7CAEE;">name</span><span style="color:#666666;">],</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">[</span><span style="color:#DBD7CAEE;">group</span><span style="color:#666666;">])</span></span>
<span class="line"><span style="color:#DBD7CAEE;">   args 进行执行需要携带参数时。（以元组的方式给任务传参）</span></span>
<span class="line"><span style="color:#DBD7CAEE;">   kwargs 进行执行需要携带参数时。（以字典的方式给任务传参）</span></span>
<span class="line"><span style="color:#DBD7CAEE;">   name 进程名，一般不用设置</span></span>
<span class="line"><span style="color:#DBD7CAEE;">   group 进程组，目前只能使用None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#4C9A91;">3</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;"> 启动线程执行任务</span></span>
<span class="line"><span style="color:#DBD7CAEE;">线程对象xxx</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">start</span><span style="color:#666666;">()</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#2F798A;">1</span><span style="color:#999999;">.</span><span style="color:#393A34;"> 导入线程模块</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> threading</span></span>
<span class="line"></span>
<span class="line"><span style="color:#2F798A;">2</span><span style="color:#999999;">.</span><span style="color:#393A34;"> 通过线程类创建线程对象</span></span>
<span class="line"><span style="color:#393A34;">线程对象xxx </span><span style="color:#999999;">=</span><span style="color:#393A34;"> threading</span><span style="color:#999999;">.</span><span style="color:#393A34;">Thread</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#999999;">=</span><span style="color:#393A34;">任务名</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#393A34;">args</span><span style="color:#999999;">]</span><span style="color:#AB5959;">|</span><span style="color:#999999;">[</span><span style="color:#393A34;">kwargs</span><span style="color:#999999;">],</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#393A34;">name</span><span style="color:#999999;">],</span><span style="color:#393A34;"> </span><span style="color:#999999;">[</span><span style="color:#393A34;">group</span><span style="color:#999999;">])</span></span>
<span class="line"><span style="color:#393A34;">   args 进行执行需要携带参数时。（以元组的方式给任务传参）</span></span>
<span class="line"><span style="color:#393A34;">   kwargs 进行执行需要携带参数时。（以字典的方式给任务传参）</span></span>
<span class="line"><span style="color:#393A34;">   name 进程名，一般不用设置</span></span>
<span class="line"><span style="color:#393A34;">   group 进程组，目前只能使用None</span></span>
<span class="line"></span>
<span class="line"><span style="color:#2F798A;">3</span><span style="color:#999999;">.</span><span style="color:#393A34;"> 启动线程执行任务</span></span>
<span class="line"><span style="color:#393A34;">线程对象xxx</span><span style="color:#999999;">.</span><span style="color:#393A34;">start</span><span style="color:#999999;">()</span></span></code></pre></div></li><li><p>主线程和子线程的结束顺序</p><p>对比进程：</p><ul><li>主线程会等待所有子线程执行结束后主线程在结束</li></ul><p>设置守护主线程： 实现主线程不等待子线程程序执行完再结束</p><ul><li><div class="language-py vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">py</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4C9A91;">1</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;"> 设置守护主线程：方式 </span><span style="color:#4C9A91;">1</span><span style="color:#DBD7CAEE;"> 在创建线程设置 daemon </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">True</span></span>
<span class="line"><span style="color:#DBD7CAEE;"> 线程对象 xxx </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> threading</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">Thread</span><span style="color:#666666;">(</span><span style="color:#BD976A;">target</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> 任务名</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">daemon</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">True</span><span style="color:#666666;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;"> </span><span style="color:#4C9A91;">2</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;"> 设置守护主线程： 方式 </span><span style="color:#4C9A91;">2</span><span style="color:#DBD7CAEE;"> 在创建线程后 设置 </span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">setDaemon</span><span style="color:#666666;">(</span><span style="color:#4D9375;">True</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#DBD7CAEE;"> 线程对象 xxx</span><span style="color:#666666;">.</span><span style="color:#DBD7CAEE;">setDaemon</span><span style="color:#666666;">(</span><span style="color:#4D9375;">True</span><span style="color:#666666;">)</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#2F798A;">1</span><span style="color:#999999;">.</span><span style="color:#393A34;"> 设置守护主线程：方式 </span><span style="color:#2F798A;">1</span><span style="color:#393A34;"> 在创建线程设置 daemon </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">True</span></span>
<span class="line"><span style="color:#393A34;"> 线程对象 xxx </span><span style="color:#999999;">=</span><span style="color:#393A34;"> threading</span><span style="color:#999999;">.</span><span style="color:#393A34;">Thread</span><span style="color:#999999;">(</span><span style="color:#B07D48;">target</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> 任务名</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">daemon</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">True</span><span style="color:#999999;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;"> </span><span style="color:#2F798A;">2</span><span style="color:#999999;">.</span><span style="color:#393A34;"> 设置守护主线程： 方式 </span><span style="color:#2F798A;">2</span><span style="color:#393A34;"> 在创建线程后 设置 </span><span style="color:#999999;">.</span><span style="color:#393A34;">setDaemon</span><span style="color:#999999;">(</span><span style="color:#1E754F;">True</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#393A34;"> 线程对象 xxx</span><span style="color:#999999;">.</span><span style="color:#393A34;">setDaemon</span><span style="color:#999999;">(</span><span style="color:#1E754F;">True</span><span style="color:#999999;">)</span></span></code></pre></div></li></ul></li><li><p>线程之间的执行顺序</p><ul><li><p>是无序的</p></li><li><p>获取当前线程的对象</p><ul><li>通过 .current_thread() 方法获取线程对象 thread = threading.current_thread()</li></ul></li></ul></li></ol><h2 id="进程和线程对比" tabindex="-1">进程和线程对比 <a class="header-anchor" href="#进程和线程对比" aria-label="Permalink to &quot;进程和线程对比&quot;">​</a></h2><ol><li><p>关系对比</p><ul><li><p>线程是依附在进程里面的， 没有进程就没有线程</p></li><li><p>一个进程默认提供一条线程， 进程可以创建多个线程</p></li></ul></li><li><p>区别对比</p><ul><li><p>创建进程的资源开销要比创建线程的资源开销大</p></li><li><p>进程是操作系统资源分配的基本单位， 线程是 CPU 调度的基本单位</p></li><li><p>线程不能够独立执行， 必须依存在进程中</p></li></ul></li><li><p>优缺点对比</p><ul><li><p>进程</p><ul><li>优点： 可以用多核</li><li>缺点： 资源开销大</li></ul></li><li><p>线程</p><ul><li>优点： 资源开销小</li><li>缺点： 不能使用多核</li></ul></li></ul></li></ol>`,14),e=[o];function t(c,r,y,i,A,D){return a(),n("div",null,e)}const C=s(p,[["render",t]]);export{d as __pageData,C as default};
