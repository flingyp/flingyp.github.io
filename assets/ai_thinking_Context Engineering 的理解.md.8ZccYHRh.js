import{_ as i,c as a,o as n,as as t}from"./chunks/framework.B-x_5eXW.js";const E=JSON.parse('{"title":"Context 工程的理解","description":"","frontmatter":{},"headers":[],"relativePath":"ai_thinking/Context Engineering 的理解.md","filePath":"ai_thinking/Context Engineering 的理解.md","lastUpdated":1758165179000}'),e={name:"ai_thinking/Context Engineering 的理解.md"};function l(h,s,p,k,o,r){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="context-工程的理解" tabindex="-1">Context 工程的理解 <a class="header-anchor" href="#context-工程的理解" aria-label="Permalink to &quot;Context 工程的理解&quot;">​</a></h1><h2 id="如何理解上下文-context" tabindex="-1">如何理解上下文 Context <a class="header-anchor" href="#如何理解上下文-context" aria-label="Permalink to &quot;如何理解上下文 Context&quot;">​</a></h2><p>上下文 Context 就是能够提供前因后果一系列有用的背景信息</p><p>就像在跟人聊天时，对方说的一句话，<strong>能不能理解，往往取决于之前聊了什么</strong>。</p><ul><li>没有上下文：突然听到一句「他来了」，你可能会问：「谁啊？」、「在哪？」、「什么时候？」</li><li>有上下文：但如果前面大家已经在聊「小王今晚会不会来聚会」，那一句「他来了」你立刻就能懂了。</li></ul><p>所以，上下文的作用就是让一句话、一个动作、一个代码片段有意义。</p><h2 id="prompt-工程-和-context-工程的区别是什么" tabindex="-1">Prompt 工程 和 Context 工程的区别是什么 <a class="header-anchor" href="#prompt-工程-和-context-工程的区别是什么" aria-label="Permalink to &quot;Prompt 工程 和 Context 工程的区别是什么&quot;">​</a></h2><p>我认为 Context 工程就是一系列有序不杂乱无章规范的 Prompt 工程的组合（包括各种提示词（系统，用户，历史对话，工具调用信息等等））</p><p>早期 AI 的出现，和 AI 沟通只是简单的交流回复，这个时候单一的 Prompt 工程去规范 AI 的输出就已经需求了</p><p>现在 AI Agent 的出现，简单的 Prompt 工程已经完全不够用了，这个时候我们需要 AI 输出的内容已经不是让 AI 扮演为一个固定的角色，输出固定的内容。它应该是不断学习，不断总结最后输出的一个过程。</p><p>所以这个时候，我们需要能够给 AI 提供一个尽可能全面背景的上下文信息的完整系统。</p><h2 id="context-工程的主要工作有哪些" tabindex="-1">Context 工程的主要工作有哪些？ <a class="header-anchor" href="#context-工程的主要工作有哪些" aria-label="Permalink to &quot;Context 工程的主要工作有哪些？&quot;">​</a></h2><p>定义一系列有序不杂乱无章规范的 Prompt</p><p>包括一系列有用的信息</p><ul><li>文档</li><li>示例</li><li>规则</li><li>测试</li><li>等等一系列有用的上下文信息</li></ul><h2 id="示例" tabindex="-1">示例 <a class="header-anchor" href="#示例" aria-label="Permalink to &quot;示例&quot;">​</a></h2><h3 id="设置全局规则-claude-md" tabindex="-1">设置全局规则 <code>CLAUDE.md</code> <a class="header-anchor" href="#设置全局规则-claude-md" aria-label="Permalink to &quot;设置全局规则 \`CLAUDE.md\`&quot;">​</a></h3><p><code>CLAUDE.md</code> 文件包含 AI 助手在每次对话中将遵循的项目范围的规则。</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">### 🔄 Project Awareness &amp; Context</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;"> **Always read </span><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">\`PLANNING.md\`</span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> at the start of a new conversation to understand the project&#39;s architecture, goals, style, and constraints.</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;"> **Check </span><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">\`TASK.md\`</span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> before starting a new task. If the task isn’t listed, add it with a brief description and today&#39;s date.</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;"> **Use consistent naming conventions, file structure, and architecture patterns**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> as described in </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\`PLANNING.md\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;"> **Use venv_linux**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (the virtual environment) whenever executing Python commands, including for unit tests.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">### 🧱 Code Structure &amp; Modularity</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;"> **Never create a file longer than 500 lines of code.**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> If a file approaches this limit, refactor by splitting it into modules or helper files.</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;"> **Organize code into clearly separated modules**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, grouped by feature or responsibility.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  For agents this looks like:</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \`agent.py\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> - Main agent definition and execution logic </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \`tools.py\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> - Tool functions used by the agent </span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> \`prompts.py\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> - System prompts</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;"> **Use clear, consistent imports**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (prefer relative imports within packages).</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;"> **Use clear, consistent imports**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (prefer relative imports within packages).</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;"> **Use python_dotenv and load_env()**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> for environment variables.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">### 🧪 Testing &amp; Reliability</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;"> **Always create Pytest unit tests for new features**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (functions, classes, routes, etc).</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;"> **After updating any logic**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, check whether existing unit tests need to be updated. If so, do it.</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;"> **Tests should live in a </span><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">\`/tests\`</span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;"> folder**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> mirroring the main app structure.</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">  -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Include at least:</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 1 test for expected use</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 1 edge case</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">    -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 1 failure case</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">### ✅ Task Completion</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;"> **Mark completed tasks in </span><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">\`TASK.md\`</span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;">**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> immediately after finishing them.</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Add new sub-tasks or TODOs discovered during development to </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\`TASK.md\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> under a “Discovered During Work” section.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">### 📎 Style &amp; Conventions</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;"> **Use Python**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> as the primary language.</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;"> **Follow PEP8**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, use type hints, and format with </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\`black\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;"> **Use </span><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">\`pydantic\`</span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;"> for data validation**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Use </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\`FastAPI\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> for APIs and </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\`SQLAlchemy\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> or </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\`SQLModel\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> for ORM if applicable.</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Write </span><span style="--shiki-light:#24292E;--shiki-light-font-weight:bold;--shiki-dark:#E1E4E8;--shiki-dark-font-weight:bold;">**docstrings for every function**</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> using the Google style:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  \`\`\`python</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  def example():</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &quot;&quot;&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Brief summary.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Args:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          param1 (type): Description.</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      Returns:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">          type: Description.</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">      &quot;&quot;&quot;</span></span></code></pre></div><h3 id="📚-documentation-explainability" tabindex="-1">📚 Documentation &amp; Explainability <a class="header-anchor" href="#📚-documentation-explainability" aria-label="Permalink to &quot;📚 Documentation &amp; Explainability&quot;">​</a></h3><ul><li><strong>Update <code>README.md</code></strong> when new features are added, dependencies change, or setup steps are modified.</li><li><strong>Comment non-obvious code</strong> and ensure everything is understandable to a mid-level developer.</li><li>When writing complex logic, <strong>add an inline <code># Reason:</code> comment</strong> explaining the why, not just the what.</li></ul><h3 id="🧠-ai-behavior-rules" tabindex="-1">🧠 AI Behavior Rules <a class="header-anchor" href="#🧠-ai-behavior-rules" aria-label="Permalink to &quot;🧠 AI Behavior Rules&quot;">​</a></h3><ul><li><strong>Never assume missing context. Ask questions if uncertain.</strong></li><li><strong>Never hallucinate libraries or functions</strong> – only use known, verified Python packages.</li><li><strong>Always confirm file paths and module names</strong> exist before referencing them in code or tests.</li><li><strong>Never delete or overwrite existing code</strong> unless explicitly instructed to or if part of a task from <code>TASK.md</code>.</li></ul><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>### 编写自己的需求文档 **\`INITIAL.md\`**</span></span>
<span class="line"><span></span></span>
<span class="line"><span>在编写需求文档，最好能够全面的描述自己的需求，尽可能的提供一些为了实现自己特定需求而有用上下文档信息。</span></span>
<span class="line"><span></span></span>
<span class="line"><span>例如：examples、docs、tips</span></span>
<span class="line"><span></span></span>
<span class="line"><span>\`\`\`markdown</span></span>
<span class="line"><span>## Features</span></span>
<span class="line"><span></span></span>
<span class="line"><span>尽可能描述自己的需求</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## Examples</span></span>
<span class="line"><span></span></span>
<span class="line"><span>提供示例文件【如果有的话】</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## Docs</span></span>
<span class="line"><span></span></span>
<span class="line"><span>完成需求需要 AI 学习或者了解的知识</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- [xx1](xxx1)</span></span>
<span class="line"><span>- [xx2](xxx2)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>## Tips </span></span>
<span class="line"><span></span></span>
<span class="line"><span>一些注意事项【如果是经常用的注意事项，也可以定义在 Rules 或者是 CLAUDE.md 文件里】</span></span></code></pre></div><h2 id="参考资料" tabindex="-1">参考资料 <a class="header-anchor" href="#参考资料" aria-label="Permalink to &quot;参考资料&quot;">​</a></h2><p><a href="https://github.com/coleam00/context-engineering-intro" target="_blank" rel="noreferrer">https://github.com/coleam00/context-engineering-intro</a></p>`,26)]))}const g=i(e,[["render",l]]);export{E as __pageData,g as default};
