import{_ as a,c as e,o as i,V as s}from"./chunks/framework.CK8YuoVq.js";const b=JSON.parse('{"title":"Git 常规操作","description":"","frontmatter":{},"headers":[],"relativePath":"posts/Git常规操作.md","filePath":"posts/Git常规操作.md","lastUpdated":1709193032000}'),n={name:"posts/Git常规操作.md"},l=s(`<h1 id="git-常规操作" tabindex="-1">Git 常规操作 <a class="header-anchor" href="#git-常规操作" aria-label="Permalink to &quot;Git 常规操作&quot;">​</a></h1><h2 id="git-相关概念" tabindex="-1">Git 相关概念 <a class="header-anchor" href="#git-相关概念" aria-label="Permalink to &quot;Git 相关概念&quot;">​</a></h2><ul><li><strong>本地仓库</strong>：存放在本机中的仓库，每台计算机都有本地仓库，本地仓库又可以细分为三个概念，分别是工作区，暂存区和本地库</li><li><strong>工作区</strong>：带.git 文件的文件夹就可以看做是一个工作区，也可以将写代码的地方看成工作区</li><li><strong>暂存区</strong>：它是一个隐式的概念，工作区中的文件会添加到暂存区</li><li><strong>本地库</strong>：本地库就是本地仓库中用于存放文件和版本管理的地方，暂存区会将文件提交到本地库当中</li><li><strong>远程仓库</strong>：远程仓库是托管在服务器中的仓库，可以被多台计算机访问</li></ul><h2 id="git-初始化配置" tabindex="-1">Git 初始化配置 <a class="header-anchor" href="#git-初始化配置" aria-label="Permalink to &quot;Git 初始化配置&quot;">​</a></h2><p>配置本地账号用户信息</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config --global user.email &quot;xxxx&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">git</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> config --global user.name &quot;xxx@xx.com&quot;</span></span></code></pre></div><h2 id="github-ssh-配置" tabindex="-1">Github SSH 配置 <a class="header-anchor" href="#github-ssh-配置" aria-label="Permalink to &quot;Github SSH 配置&quot;">​</a></h2><p>先检查下电脑是否配置了用户信息 <code>git config --global --list</code>，如果没有配置则进行本地账号信息配置再进行下一步配置</p><p>在本地电脑 通过 <code>git bash</code> 打开执行 <code>ssh-keygen -t rsa -C &quot;这里换上你的邮箱&quot;</code>，执行命令后直接回车 3 次即可，不需要去输入密码</p><p>可以通过 <code>cat ~/.ssh/id_rsa.pub</code> 查看生成的公钥 或者 在电脑的 C 盘/用户文件夹下 找到 <code>.ssh</code> 文件夹 打开可以看到 <code>id_rsa</code> 和 <code>id_rsa.pub</code> 的文件。 <code>id_rsa.pub</code> 是公钥文件</p><p>进入自己的 Github 到 Settings 找到 SSH and GPG keys 点击 New SSH key 按钮。 输入 标题 和 生成的公钥 Key 即可</p><h2 id="常用命令" tabindex="-1">常用命令 <a class="header-anchor" href="#常用命令" aria-label="Permalink to &quot;常用命令&quot;">​</a></h2><ol><li>初始化仓库：<code>git init</code></li><li>克隆仓库：<code>git clone url</code></li><li>克隆指定分支：<code>git clone -b branch url</code></li><li>查看状态：<code>git status</code></li><li>提交单个文件：<code>git add file</code></li><li>提交所有文件：<code>git add .</code></li><li>提交暂存库文件到本地仓库：<code>git commit -m &#39;提示信息&#39;</code></li><li>删除版本库和项目目录中的文件：<code>git rm file</code></li><li>只删除版本库中文件但保存项目目录中文件：<code>git rm --cached file</code></li><li>修改最后一次提交信息：<code>git commit --amend</code></li><li>提交代码到远程仓库：<code>git push</code></li></ol><h2 id="分支操作" tabindex="-1">分支操作 <a class="header-anchor" href="#分支操作" aria-label="Permalink to &quot;分支操作&quot;">​</a></h2><ol><li>创建分支：<code>git branch branchName</code></li><li>切换分支：<code>git checkout branchName</code></li><li>创建并切换分支：<code>git checkout -b branchName</code></li><li>合并分支并且提交到主分支中：<code>git checkout main &amp; git merge branchName</code></li><li>修改分支名称：<code>git branch -m old_name new_name</code></li><li>删除分支：<code>git branch -d branchName</code></li><li>删除没有合并的分支：<code>git branch -D branchName</code></li><li>删除远程分支：<code>git branch origin :branchName</code></li><li>查看未合并的分支(切换到主分支)：<code>git branch --no-merged</code></li><li>查看已经合并的分支(切换到主分支)：<code>git branch --merged</code></li></ol><h2 id="查看历史版本" tabindex="-1">查看历史版本 <a class="header-anchor" href="#查看历史版本" aria-label="Permalink to &quot;查看历史版本&quot;">​</a></h2><ol><li>查看历史版本提交日志：<code>git log</code></li><li>切换到某个提交的 commit-id 历史版本：<code>git checkout commit-id</code></li><li>以某个历史版本创建分支：<code>git checkout commit-id branch_name</code></li></ol><h2 id="版本前进和回退" tabindex="-1">版本前进和回退 <a class="header-anchor" href="#版本前进和回退" aria-label="Permalink to &quot;版本前进和回退&quot;">​</a></h2><p>对于本地仓库而言，每一次提交的成功执行，就意味着一个新版本的生成，Git 会将这些版本给保存起来</p><p>首先需要查看版本详细信息，通过 <code>git reflog</code> 命令可以查看到所有版本的信息。第一列它会显示一个索引号，这个索引号其实是一个 Hash 值，每个版本都会对应一个 Hash 值，我们可以通过这个 Hash 来进行版本的切换</p><p>切换到指定的版本: <code>git reset --hard 索引号</code></p><ul><li><code>--hard</code> 重置位置的同时，直接将 working Tree 工作目录、 index 暂存区及 repository 都重置成目标 Reset 节点的內容</li><li><code>--soft</code> 重置位置的同时，保留 working Tree 工作目录和 index 暂存区的内容，只让 repository 中的内容和 reset 目标节点保持一致</li><li><code>--mixed</code>（默认） 重置位置的同时，只保留 Working Tree 工作目录的內容，但会将 Index 暂存区 和 Repository 中的內容更改和 reset 目标节点一致</li></ul><h2 id="储藏-stashing" tabindex="-1">储藏 Stashing <a class="header-anchor" href="#储藏-stashing" aria-label="Permalink to &quot;储藏 Stashing&quot;">​</a></h2><p>当你正在进行项目中某一部分的工作，里面的东西处于一个比较杂乱的状态，而你想转到其他分支上进行一些工作。问题是，你不想提交进行了一半的工作，否则以后你无法回到这个工作点</p><p>暂存可以获取你工作目录的中间状态——也就是你修改过的被追踪的文件和暂存的变更——并将它保存到一个未完结变更的堆栈中，随时可以重新应用</p><ul><li>储藏工作: <code>git stash</code></li><li>查看储藏列表: <code>git stash list</code></li><li>应用最近的储藏: <code>git stash apply</code></li><li>应用更早的储藏: <code>git stash apply stash@{2}</code></li><li>删除储藏: <code>git stash drop stash@{0}</code></li><li>应用并删除储藏: <code>git stash pop</code></li></ul><h2 id="标签-tag" tabindex="-1">标签 Tag <a class="header-anchor" href="#标签-tag" aria-label="Permalink to &quot;标签 Tag&quot;">​</a></h2><p>Git 也可以对某一时间点上的版本打上标签 ，用于发布软件版本如 <code>v1.0.0</code>、<code>v1.1.0</code>、<code>v2.0.0</code></p><ul><li>添加标签：<code>git tag v1.0</code></li><li>列出标签：<code>git tag</code></li><li>推送标签：<code>git push --tags</code></li><li>删除标签：<code>git tag -d v1.0.1</code></li><li>删除远程标签：<code>git push origin :v1.0.1</code></li></ul><h2 id="远程库相关命令" tabindex="-1">远程库相关命令 <a class="header-anchor" href="#远程库相关命令" aria-label="Permalink to &quot;远程库相关命令&quot;">​</a></h2><ul><li><code>git push &lt;别名/地址名&gt; &lt;分支名&gt;</code>： 推送本地库到远程库</li><li><code>git clone &lt;别名/地址名&gt;</code></li><li><code>git pull &lt;别名/远程库地址名&gt; &lt;远程库分支名&gt;</code>： 将远程库新增/修改内容拉取到本地库并合- 并</li><li><code>git fetch &lt;别名/远程库地址名&gt; &lt;远程库分支名&gt;</code>： 将远程库新增/修改内容拉取到本地库</li><li><code>git merge &lt;别名/远程分支名&gt;</code>： 将 fetch 下来的内容合并起来</li></ul><h2 id="gitignore" tabindex="-1"><code>.gitignore</code> <a class="header-anchor" href="#gitignore" aria-label="Permalink to &quot;\`.gitignore\`&quot;">​</a></h2><p>用于定义忽略提交的文件</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span># Logs</span></span>
<span class="line"><span>logs</span></span>
<span class="line"><span>*.log</span></span>
<span class="line"><span>npm-debug.log*</span></span>
<span class="line"><span>yarn-debug.log*</span></span>
<span class="line"><span>yarn-error.log*</span></span>
<span class="line"><span>pnpm-debug.log*</span></span>
<span class="line"><span>lerna-debug.log*</span></span>
<span class="line"><span></span></span>
<span class="line"><span>node_modules</span></span>
<span class="line"><span>dist</span></span>
<span class="line"><span>dist-ssr</span></span>
<span class="line"><span>*.local</span></span>
<span class="line"><span></span></span>
<span class="line"><span># Editor directories and files</span></span>
<span class="line"><span>.vscode/*</span></span>
<span class="line"><span>!.vscode/extensions.json</span></span>
<span class="line"><span>.idea</span></span>
<span class="line"><span>.DS_Store</span></span>
<span class="line"><span>*.suo</span></span>
<span class="line"><span>*.ntvs*</span></span>
<span class="line"><span>*.njsproj</span></span>
<span class="line"><span>*.sln</span></span>
<span class="line"><span>*.sw?</span></span></code></pre></div>`,34),o=[l];function t(c,d,p,r,h,g){return i(),e("div",null,o)}const m=a(n,[["render",t]]);export{b as __pageData,m as default};
