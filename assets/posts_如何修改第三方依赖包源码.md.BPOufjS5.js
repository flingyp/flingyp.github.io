import{_ as a,c as e,o as p,ag as i}from"./chunks/framework.BhcQuJV0.js";const r=JSON.parse('{"title":"如何修改第三方依赖包源码","description":"","frontmatter":{},"headers":[],"relativePath":"posts/如何修改第三方依赖包源码.md","filePath":"posts/如何修改第三方依赖包源码.md","lastUpdated":1750602982000}'),n={name:"posts/如何修改第三方依赖包源码.md"};function t(o,s,c,l,d,h){return p(),e("div",null,s[0]||(s[0]=[i(`<h1 id="如何修改第三方依赖包源码" tabindex="-1">如何修改第三方依赖包源码 <a class="header-anchor" href="#如何修改第三方依赖包源码" aria-label="Permalink to &quot;如何修改第三方依赖包源码&quot;">​</a></h1><p>在实际开发中，可能会遇到第三方依赖出现BUG，提交PR等待官方修复比较耗时，此时可以考虑直接修改项目第三方依赖包的代码来解决问题比较符合实际</p><p>本文主要介绍 <code>pnpm patch</code>、<code>pnpm patch commit</code> 打补丁的方式来实现</p><p>场景复现：</p><p>比如我们发现第三方依赖包有BUG并且我们知道应该改哪里，但是又不想提交PR，此时就可以使用 <code>pnpm patch</code> 命令来打补丁</p><ul><li>在命令行执行 <code>pnpm patch packageName@version</code></li></ul><p>之后命令行生成一个 <code>packageName</code> 的临时文件夹路径，我们点击就可以去编辑它的源代码</p><p>修改完成保存后，执行 <code>pnpm patch commit 临时文件夹路径</code></p><p>然后就可以在项目看到生成了一个 <code>patches/packageName@version.patch</code> 的文件，同时在 <code>package.json</code> 中也增加了如下配置：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;pnpm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;patchedDependencies&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;packageName@version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;patches/packageName@version.patch&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>然后这就搞定了！查看 <code>node_modules</code> 下的依赖包的代码，修改的地方就会加上了，后续别人拿到该项目，重新 <code>pnpm i</code> 也能得到修改后的代码</p>`,11)]))}const _=a(n,[["render",t]]);export{r as __pageData,_ as default};
