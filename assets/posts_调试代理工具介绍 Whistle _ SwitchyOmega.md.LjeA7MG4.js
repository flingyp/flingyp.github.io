import{_ as a,c as e,o as s,as as i}from"./chunks/framework.B-x_5eXW.js";const d=JSON.parse('{"title":"调试代理工具介绍 Whistle + SwitchyOmega","description":"","frontmatter":{},"headers":[],"relativePath":"posts/调试代理工具介绍 Whistle + SwitchyOmega.md","filePath":"posts/调试代理工具介绍 Whistle + SwitchyOmega.md","lastUpdated":1755930479000}'),r={name:"posts/调试代理工具介绍 Whistle + SwitchyOmega.md"};function l(o,t,n,h,p,g){return s(),e("div",null,t[0]||(t[0]=[i(`<h1 id="调试代理工具介绍-whistle-switchyomega" tabindex="-1">调试代理工具介绍 Whistle + SwitchyOmega <a class="header-anchor" href="#调试代理工具介绍-whistle-switchyomega" aria-label="Permalink to &quot;调试代理工具介绍 Whistle + SwitchyOmega&quot;">​</a></h1><h2 id="whistle-调试代理工具" tabindex="-1">Whistle 调试代理工具 <a class="header-anchor" href="#whistle-调试代理工具" aria-label="Permalink to &quot;Whistle 调试代理工具&quot;">​</a></h2><p>文档：<a href="https://wproxy.org/" target="_blank" rel="noreferrer">https://wproxy.org/</a></p><p>NPM 包 <strong>Whistle</strong> 是基于 Node.js 的跨平台网络调试代理工具，能捕获分析多种网络流量，支持规则配置修改请求/响应，适用于调试、测试和接口模拟。</p><p>主要特性：</p><ul><li><strong>多种代理模式</strong>：HTTP、HTTPS、Socks、反向代理。</li><li><strong>全面抓包</strong>：捕获 HTTP、HTTP/2、WebSocket、TCP 流量。</li><li><strong>灵活处理机制</strong>：通过 <code>pattern operatorURI</code> 规则匹配请求并重定向、替换或模拟</li><li><strong>内置调试工具</strong>：Weinre、日志、Composer等，便于远程调试和请求重发。</li><li><strong>插件扩展</strong>：支持新增协议、注入JS、模拟响应、调试移动端控制台。</li><li><strong>使用便捷</strong>：跨平台、简易安装、本地代理、HTTPS抓包、快速配置。</li></ul><h3 id="whistle-规则系统" tabindex="-1">Whistle 规则系统 <a class="header-anchor" href="#whistle-规则系统" aria-label="Permalink to &quot;Whistle 规则系统&quot;">​</a></h3><p>Whistle 的核心之一就是它的 <strong>Rules（规则）系统</strong>，它允许你通过「<strong>模式匹配 + 操作指令</strong>」的方式，灵活地<strong>拦截、修改、重定向、替换</strong>请求或响应，是整个调试代理系统的控制中心。</p><div class="language-jsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">pattern operator</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 示例</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">www.example.com </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">http</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//127.0.0.1:3000</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 把对 www.example.com 的请求转发到本地服务器</span></span></code></pre></div><ul><li><strong>pattern</strong>（模式）：匹配请求的目标，如 URL、域名、路径、文件扩展名等。</li><li><strong>operator</strong>（操作）：定义对匹配到的请求执行什么操作，比如转发、替换、修改 header、注入 JS 等。</li></ul><p>Whistle 会从上到下、<strong>逐行匹配规则</strong>，只要命中就执行操作。</p><h2 id="proxy-switchyomega-3-浏览器代理插件" tabindex="-1">Proxy SwitchyOmega 3 - 浏览器代理插件 <a class="header-anchor" href="#proxy-switchyomega-3-浏览器代理插件" aria-label="Permalink to &quot;Proxy SwitchyOmega 3 - 浏览器代理插件&quot;">​</a></h2><h3 id="应用场景" tabindex="-1">应用场景 <a class="header-anchor" href="#应用场景" aria-label="Permalink to &quot;应用场景&quot;">​</a></h3><p>首先，在使用插件之前，需要一个代理服务器，并且你已经通过某个代理客户端实现了科学上网，如<a href="https://switchyomega.org/all-proxy-client/" target="_blank" rel="noreferrer">科学上网客户端大全</a>当中的一些客户端。</p><p>当我们把这些代理客户端的代理规则设置为全局模式时，访问国内网站会很慢，所以我们一般会把这些代理客户端的代理规则设置为绕过局域网和大陆，但当我们访问某些国外网站时，如访问职场社交网站 领英 Linkedin 则必须使用全局代理规则，频繁的手动切换代理模式十分麻烦。</p><p>这时候使用 SwitchyOmega 来配置代理，就显得十分方便了，在情景模式中把需要通过全局模式访问的网站配置好，当访问这些网站时，会自动切换成通过代理服务器访问，其余网站则不通过代理服务器来访问，免去手动切换代理模式的烦恼。</p><h3 id="代理变化" tabindex="-1">代理变化 <a class="header-anchor" href="#代理变化" aria-label="Permalink to &quot;代理变化&quot;">​</a></h3><p>不安装插件时，浏览器的代理取决于系统的默认代理，如某些代理客户端不支持自定义规则就显得十分不方便，安装插件后，浏览器的代理取决于插件的设置，不通过系统的默认代理。</p><p><strong>安装插件之前</strong>：打开网站 &gt; 发送访问请求 &gt; 系统代理 &gt; 代理客户端 &gt; 代理服务器 &gt; 目标网站</p><p><strong>安装插件之后</strong>：打开网站 &gt; 发送访问请求 &gt; SwitchyOmega &gt; 代理客户端 &gt; 代理服务器 &gt; 目标网站</p><ul><li>安装插件后，可根据插件的默认规则或插件的自定义规则带决定访问的网站是否使用代理以及使用哪个代</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>我们可以通过 Whistle + Proxy SwitchyOmega 3 来实现在前端通过域名的形式来访问本地 <code>localhost</code> 启动的项目，模拟正式场景</p>`,23)]))}const m=a(r,[["render",l]]);export{d as __pageData,m as default};
