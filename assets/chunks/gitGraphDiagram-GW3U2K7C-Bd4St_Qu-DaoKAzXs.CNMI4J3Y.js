import{i as J}from"./chunk-353BL4L5-xy92gJmW-DsDFHcGi.DKN5H_as.js";import{e as Q}from"./chunk-AACKK3MU-BQrFp87Y-Du7YbHi1.DYDVkx7S.js";import{S as h,ap as Z,ao as tt,a6 as et,a7 as rt,a8 as ot,a9 as at,u,m as st,aa as nt,an as ct,aA as it,au as dt,ah as k,aB as ht,aC as mt,aD as $t,aE as lt}from"./theme.B1sdK41g.js";import{I as gt}from"./treemap-75Q7IDZK-SnVjud3P-WwNA3Y5D.CTeAYfeh.js";import"./framework.B-x_5eXW.js";import"./baseUniq-DRFSKfuj-B0UglZZz.C_H-WQbm.js";import"./basePickBy-CdA63Yk3-C10GSIx9.B-UKW_vv.js";import"./clone-CXzvyaxT-CY47cZUA.Cq5R-QII.js";var p={NORMAL:0,REVERSE:1,HIGHLIGHT:2,MERGE:3,CHERRY_PICK:4},yt=$t.gitGraph,A=h(()=>ht({...yt,...mt().gitGraph}),"getConfig"),i=new Q(()=>{const e=A(),t=e.mainBranchName,o=e.mainBranchOrder;return{mainBranchName:t,commits:new Map,head:null,branchConfig:new Map([[t,{name:t,order:o}]]),branches:new Map([[t,null]]),currBranch:t,direction:"LR",seq:0,options:{}}});function S(){return lt({length:7})}h(S,"getID");function K(e,t){const o=Object.create(null);return e.reduce((s,r)=>{const a=t(r);return o[a]||(o[a]=!0,s.push(r)),s},[])}h(K,"uniqBy");var pt=h(function(e){i.records.direction=e},"setDirection"),xt=h(function(e){u.debug("options str",e),e=e==null?void 0:e.trim(),e=e||"{}";try{i.records.options=JSON.parse(e)}catch(t){u.error("error while parsing gitGraph options",t.message)}},"setOptions"),ft=h(function(){return i.records.options},"getOptions"),ut=h(function(e){let t=e.msg,o=e.id;const s=e.type;let r=e.tags;u.info("commit",t,o,s,r),u.debug("Entering commit:",t,o,s,r);const a=A();o=k.sanitizeText(o,a),t=k.sanitizeText(t,a),r=r==null?void 0:r.map(n=>k.sanitizeText(n,a));const c={id:o||i.records.seq+"-"+S(),message:t,seq:i.records.seq++,type:s??p.NORMAL,tags:r??[],parents:i.records.head==null?[]:[i.records.head.id],branch:i.records.currBranch};i.records.head=c,u.info("main branch",a.mainBranchName),i.records.commits.has(c.id)&&u.warn(`Commit ID ${c.id} already exists`),i.records.commits.set(c.id,c),i.records.branches.set(i.records.currBranch,c.id),u.debug("in pushCommit "+c.id)},"commit"),bt=h(function(e){let t=e.name;const o=e.order;if(t=k.sanitizeText(t,A()),i.records.branches.has(t))throw new Error(`Trying to create an existing branch. (Help: Either use a new name if you want create a new branch or try using "checkout ${t}")`);i.records.branches.set(t,i.records.head!=null?i.records.head.id:null),i.records.branchConfig.set(t,{name:t,order:o}),_(t),u.debug("in createBranch")},"branch"),wt=h(e=>{let t=e.branch,o=e.id;const s=e.type,r=e.tags,a=A();t=k.sanitizeText(t,a),o&&(o=k.sanitizeText(o,a));const c=i.records.branches.get(i.records.currBranch),n=i.records.branches.get(t),m=c?i.records.commits.get(c):void 0,l=n?i.records.commits.get(n):void 0;if(m&&l&&m.branch===t)throw new Error(`Cannot merge branch '${t}' into itself.`);if(i.records.currBranch===t){const d=new Error('Incorrect usage of "merge". Cannot merge a branch to itself');throw d.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["branch abc"]},d}if(m===void 0||!m){const d=new Error(`Incorrect usage of "merge". Current branch (${i.records.currBranch})has no commits`);throw d.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["commit"]},d}if(!i.records.branches.has(t)){const d=new Error('Incorrect usage of "merge". Branch to be merged ('+t+") does not exist");throw d.hash={text:`merge ${t}`,token:`merge ${t}`,expected:[`branch ${t}`]},d}if(l===void 0||!l){const d=new Error('Incorrect usage of "merge". Branch to be merged ('+t+") has no commits");throw d.hash={text:`merge ${t}`,token:`merge ${t}`,expected:['"commit"']},d}if(m===l){const d=new Error('Incorrect usage of "merge". Both branches have same head');throw d.hash={text:`merge ${t}`,token:`merge ${t}`,expected:["branch abc"]},d}if(o&&i.records.commits.has(o)){const d=new Error('Incorrect usage of "merge". Commit with id:'+o+" already exists, use different custom id");throw d.hash={text:`merge ${t} ${o} ${s} ${r==null?void 0:r.join(" ")}`,token:`merge ${t} ${o} ${s} ${r==null?void 0:r.join(" ")}`,expected:[`merge ${t} ${o}_UNIQUE ${s} ${r==null?void 0:r.join(" ")}`]},d}const $=n||"",g={id:o||`${i.records.seq}-${S()}`,message:`merged branch ${t} into ${i.records.currBranch}`,seq:i.records.seq++,parents:i.records.head==null?[]:[i.records.head.id,$],branch:i.records.currBranch,type:p.MERGE,customType:s,customId:!!o,tags:r??[]};i.records.head=g,i.records.commits.set(g.id,g),i.records.branches.set(i.records.currBranch,g.id),u.debug(i.records.branches),u.debug("in mergeBranch")},"merge"),Et=h(function(e){let t=e.id,o=e.targetId,s=e.tags,r=e.parent;u.debug("Entering cherryPick:",t,o,s);const a=A();if(t=k.sanitizeText(t,a),o=k.sanitizeText(o,a),s=s==null?void 0:s.map(m=>k.sanitizeText(m,a)),r=k.sanitizeText(r,a),!t||!i.records.commits.has(t)){const m=new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');throw m.hash={text:`cherryPick ${t} ${o}`,token:`cherryPick ${t} ${o}`,expected:["cherry-pick abc"]},m}const c=i.records.commits.get(t);if(c===void 0||!c)throw new Error('Incorrect usage of "cherryPick". Source commit id should exist and provided');if(r&&!(Array.isArray(c.parents)&&c.parents.includes(r)))throw new Error("Invalid operation: The specified parent commit is not an immediate parent of the cherry-picked commit.");const n=c.branch;if(c.type===p.MERGE&&!r)throw new Error("Incorrect usage of cherry-pick: If the source commit is a merge commit, an immediate parent commit must be specified.");if(!o||!i.records.commits.has(o)){if(n===i.records.currBranch){const g=new Error('Incorrect usage of "cherryPick". Source commit is already on current branch');throw g.hash={text:`cherryPick ${t} ${o}`,token:`cherryPick ${t} ${o}`,expected:["cherry-pick abc"]},g}const m=i.records.branches.get(i.records.currBranch);if(m===void 0||!m){const g=new Error(`Incorrect usage of "cherry-pick". Current branch (${i.records.currBranch})has no commits`);throw g.hash={text:`cherryPick ${t} ${o}`,token:`cherryPick ${t} ${o}`,expected:["cherry-pick abc"]},g}const l=i.records.commits.get(m);if(l===void 0||!l){const g=new Error(`Incorrect usage of "cherry-pick". Current branch (${i.records.currBranch})has no commits`);throw g.hash={text:`cherryPick ${t} ${o}`,token:`cherryPick ${t} ${o}`,expected:["cherry-pick abc"]},g}const $={id:i.records.seq+"-"+S(),message:`cherry-picked ${c==null?void 0:c.message} into ${i.records.currBranch}`,seq:i.records.seq++,parents:i.records.head==null?[]:[i.records.head.id,c.id],branch:i.records.currBranch,type:p.CHERRY_PICK,tags:s?s.filter(Boolean):[`cherry-pick:${c.id}${c.type===p.MERGE?`|parent:${r}`:""}`]};i.records.head=$,i.records.commits.set($.id,$),i.records.branches.set(i.records.currBranch,$.id),u.debug(i.records.branches),u.debug("in cherryPick")}},"cherryPick"),_=h(function(e){if(e=k.sanitizeText(e,A()),i.records.branches.has(e)){i.records.currBranch=e;const t=i.records.branches.get(i.records.currBranch);t===void 0||!t?i.records.head=null:i.records.head=i.records.commits.get(t)??null}else{const t=new Error(`Trying to checkout branch which is not yet created. (Help try using "branch ${e}")`);throw t.hash={text:`checkout ${e}`,token:`checkout ${e}`,expected:[`branch ${e}`]},t}},"checkout");function N(e,t,o){const s=e.indexOf(t);s===-1?e.push(o):e.splice(s,1,o)}h(N,"upsert");function W(e){const t=e.reduce((r,a)=>r.seq>a.seq?r:a,e[0]);let o="";e.forEach(function(r){r===t?o+="	*":o+="	|"});const s=[o,t.id,t.seq];for(const r in i.records.branches)i.records.branches.get(r)===t.id&&s.push(r);if(u.debug(s.join(" ")),t.parents&&t.parents.length==2&&t.parents[0]&&t.parents[1]){const r=i.records.commits.get(t.parents[0]);N(e,t,r),t.parents[1]&&e.push(i.records.commits.get(t.parents[1]))}else{if(t.parents.length==0)return;if(t.parents[0]){const r=i.records.commits.get(t.parents[0]);N(e,t,r)}}e=K(e,r=>r.id),W(e)}h(W,"prettyPrintCommitHistory");var Bt=h(function(){u.debug(i.records.commits);const e=Y()[0];W([e])},"prettyPrint"),Ct=h(function(){i.reset(),dt()},"clear"),kt=h(function(){return[...i.records.branchConfig.values()].map((e,t)=>e.order!==null&&e.order!==void 0?e:{...e,order:parseFloat(`0.${t}`)}).sort((e,t)=>(e.order??0)-(t.order??0)).map(({name:e})=>({name:e}))},"getBranchesAsObjArray"),Lt=h(function(){return i.records.branches},"getBranches"),Tt=h(function(){return i.records.commits},"getCommits"),Y=h(function(){const e=[...i.records.commits.values()];return e.forEach(function(t){u.debug(t.id)}),e.sort((t,o)=>t.seq-o.seq),e},"getCommitsArray"),Mt=h(function(){return i.records.currBranch},"getCurrentBranch"),vt=h(function(){return i.records.direction},"getDirection"),Pt=h(function(){return i.records.head},"getHead"),V={commitType:p,getConfig:A,setDirection:pt,setOptions:xt,getOptions:ft,commit:ut,branch:bt,merge:wt,cherryPick:Et,checkout:_,prettyPrint:Bt,clear:Ct,getBranchesAsObjArray:kt,getBranches:Lt,getCommits:Tt,getCommitsArray:Y,getCurrentBranch:Mt,getDirection:vt,getHead:Pt,setAccTitle:at,getAccTitle:ot,getAccDescription:rt,setAccDescription:et,setDiagramTitle:tt,getDiagramTitle:Z},Rt=h((e,t)=>{J(e,t),e.dir&&t.setDirection(e.dir);for(const o of e.statements)It(o,t)},"populate"),It=h((e,t)=>{const o={Commit:h(s=>t.commit(Gt(s)),"Commit"),Branch:h(s=>t.branch(At(s)),"Branch"),Merge:h(s=>t.merge(Ot(s)),"Merge"),Checkout:h(s=>t.checkout(qt(s)),"Checkout"),CherryPicking:h(s=>t.cherryPick(Ht(s)),"CherryPicking")}[e.$type];o?o(e):u.error(`Unknown statement type: ${e.$type}`)},"parseStatement"),Gt=h(e=>({id:e.id,msg:e.message??"",type:e.type!==void 0?p[e.type]:p.NORMAL,tags:e.tags??void 0}),"parseCommit"),At=h(e=>({name:e.name,order:e.order??0}),"parseBranch"),Ot=h(e=>({branch:e.branch,id:e.id??"",type:e.type!==void 0?p[e.type]:void 0,tags:e.tags??void 0}),"parseMerge"),qt=h(e=>e.branch,"parseCheckout"),Ht=h(e=>{var t;return{id:e.id,targetId:"",tags:((t=e.tags)==null?void 0:t.length)===0?void 0:e.tags,parent:e.parent}},"parseCherryPicking"),zt={parse:h(async e=>{const t=await gt("gitGraph",e);u.debug(t),Rt(t,V)},"parse")},D=st(),f=D==null?void 0:D.gitGraph,P=10,R=40,L=4,T=2,G=8,B=new Map,C=new Map,H=30,O=new Map,z=[],v=0,y="LR",St=h(()=>{B.clear(),C.clear(),O.clear(),v=0,z=[],y="LR"},"clear"),U=h(e=>{const t=document.createElementNS("http://www.w3.org/2000/svg","text");return(typeof e=="string"?e.split(/\\n|\n|<br\s*\/?>/gi):e).forEach(o=>{const s=document.createElementNS("http://www.w3.org/2000/svg","tspan");s.setAttributeNS("http://www.w3.org/XML/1998/namespace","xml:space","preserve"),s.setAttribute("dy","1em"),s.setAttribute("x","0"),s.setAttribute("class","row"),s.textContent=o.trim(),t.appendChild(s)}),t},"drawText"),X=h(e=>{let t,o,s;return y==="BT"?(o=h((r,a)=>r<=a,"comparisonFunc"),s=1/0):(o=h((r,a)=>r>=a,"comparisonFunc"),s=0),e.forEach(r=>{var c,n;const a=y==="TB"||y=="BT"?(c=C.get(r))==null?void 0:c.y:(n=C.get(r))==null?void 0:n.x;a!==void 0&&o(a,s)&&(t=r,s=a)}),t},"findClosestParent"),Dt=h(e=>{let t="",o=1/0;return e.forEach(s=>{const r=C.get(s).y;r<=o&&(t=s,o=r)}),t||void 0},"findClosestParentBT"),Nt=h((e,t,o)=>{let s=o,r=o;const a=[];e.forEach(c=>{const n=t.get(c);if(!n)throw new Error(`Commit not found for key ${c}`);n.parents.length?(s=jt(n),r=Math.max(s,r)):a.push(n),Ft(n,s)}),s=r,a.forEach(c=>{Kt(c,s,o)}),e.forEach(c=>{const n=t.get(c);if(n!=null&&n.parents.length){const m=Dt(n.parents);s=C.get(m).y-R,s<=r&&(r=s);const l=B.get(n.branch).pos,$=s-P;C.set(n.id,{x:l,y:$})}})},"setParallelBTPos"),Wt=h(e=>{var s;const t=X(e.parents.filter(r=>r!==null));if(!t)throw new Error(`Closest parent not found for commit ${e.id}`);const o=(s=C.get(t))==null?void 0:s.y;if(o===void 0)throw new Error(`Closest parent position not found for commit ${e.id}`);return o},"findClosestParentPos"),jt=h(e=>Wt(e)+R,"calculateCommitPosition"),Ft=h((e,t)=>{const o=B.get(e.branch);if(!o)throw new Error(`Branch not found for commit ${e.id}`);const s=o.pos,r=t+P;return C.set(e.id,{x:s,y:r}),{x:s,y:r}},"setCommitPosition"),Kt=h((e,t,o)=>{const s=B.get(e.branch);if(!s)throw new Error(`Branch not found for commit ${e.id}`);const r=t+o,a=s.pos;C.set(e.id,{x:a,y:r})},"setRootPosition"),_t=h((e,t,o,s,r,a)=>{if(a===p.HIGHLIGHT)e.append("rect").attr("x",o.x-10).attr("y",o.y-10).attr("width",20).attr("height",20).attr("class",`commit ${t.id} commit-highlight${r%G} ${s}-outer`),e.append("rect").attr("x",o.x-6).attr("y",o.y-6).attr("width",12).attr("height",12).attr("class",`commit ${t.id} commit${r%G} ${s}-inner`);else if(a===p.CHERRY_PICK)e.append("circle").attr("cx",o.x).attr("cy",o.y).attr("r",10).attr("class",`commit ${t.id} ${s}`),e.append("circle").attr("cx",o.x-3).attr("cy",o.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${t.id} ${s}`),e.append("circle").attr("cx",o.x+3).attr("cy",o.y+2).attr("r",2.75).attr("fill","#fff").attr("class",`commit ${t.id} ${s}`),e.append("line").attr("x1",o.x+3).attr("y1",o.y+1).attr("x2",o.x).attr("y2",o.y-5).attr("stroke","#fff").attr("class",`commit ${t.id} ${s}`),e.append("line").attr("x1",o.x-3).attr("y1",o.y+1).attr("x2",o.x).attr("y2",o.y-5).attr("stroke","#fff").attr("class",`commit ${t.id} ${s}`);else{const c=e.append("circle");if(c.attr("cx",o.x),c.attr("cy",o.y),c.attr("r",t.type===p.MERGE?9:10),c.attr("class",`commit ${t.id} commit${r%G}`),a===p.MERGE){const n=e.append("circle");n.attr("cx",o.x),n.attr("cy",o.y),n.attr("r",6),n.attr("class",`commit ${s} ${t.id} commit${r%G}`)}a===p.REVERSE&&e.append("path").attr("d",`M ${o.x-5},${o.y-5}L${o.x+5},${o.y+5}M${o.x-5},${o.y+5}L${o.x+5},${o.y-5}`).attr("class",`commit ${s} ${t.id} commit${r%G}`)}},"drawCommitBullet"),Yt=h((e,t,o,s)=>{var r;if(t.type!==p.CHERRY_PICK&&(t.customId&&t.type===p.MERGE||t.type!==p.MERGE)&&(f!=null&&f.showCommitLabel)){const a=e.append("g"),c=a.insert("rect").attr("class","commit-label-bkg"),n=a.append("text").attr("x",s).attr("y",o.y+25).attr("class","commit-label").text(t.id),m=(r=n.node())==null?void 0:r.getBBox();if(m&&(c.attr("x",o.posWithOffset-m.width/2-T).attr("y",o.y+13.5).attr("width",m.width+2*T).attr("height",m.height+2*T),y==="TB"||y==="BT"?(c.attr("x",o.x-(m.width+4*L+5)).attr("y",o.y-12),n.attr("x",o.x-(m.width+4*L)).attr("y",o.y+m.height-12)):n.attr("x",o.posWithOffset-m.width/2),f.rotateCommitLabel))if(y==="TB"||y==="BT")n.attr("transform","rotate(-45, "+o.x+", "+o.y+")"),c.attr("transform","rotate(-45, "+o.x+", "+o.y+")");else{const l=-7.5-(m.width+10)/25*9.5,$=10+m.width/25*8.5;a.attr("transform","translate("+l+", "+$+") rotate(-45, "+s+", "+o.y+")")}}},"drawCommitLabel"),Vt=h((e,t,o,s)=>{var r;if(t.tags.length>0){let a=0,c=0,n=0;const m=[];for(const l of t.tags.reverse()){const $=e.insert("polygon"),g=e.append("circle"),d=e.append("text").attr("y",o.y-16-a).attr("class","tag-label").text(l),x=(r=d.node())==null?void 0:r.getBBox();if(!x)throw new Error("Tag bbox not found");c=Math.max(c,x.width),n=Math.max(n,x.height),d.attr("x",o.posWithOffset-x.width/2),m.push({tag:d,hole:g,rect:$,yOffset:a}),a+=20}for(const{tag:l,hole:$,rect:g,yOffset:d}of m){const x=n/2,b=o.y-19.2-d;if(g.attr("class","tag-label-bkg").attr("points",`
      ${s-c/2-L/2},${b+T}  
      ${s-c/2-L/2},${b-T}
      ${o.posWithOffset-c/2-L},${b-x-T}
      ${o.posWithOffset+c/2+L},${b-x-T}
      ${o.posWithOffset+c/2+L},${b+x+T}
      ${o.posWithOffset-c/2-L},${b+x+T}`),$.attr("cy",b).attr("cx",s-c/2+L/2).attr("r",1.5).attr("class","tag-hole"),y==="TB"||y==="BT"){const w=s+d;g.attr("class","tag-label-bkg").attr("points",`
        ${o.x},${w+2}
        ${o.x},${w-2}
        ${o.x+P},${w-x-2}
        ${o.x+P+c+4},${w-x-2}
        ${o.x+P+c+4},${w+x+2}
        ${o.x+P},${w+x+2}`).attr("transform","translate(12,12) rotate(45, "+o.x+","+s+")"),$.attr("cx",o.x+L/2).attr("cy",w).attr("transform","translate(12,12) rotate(45, "+o.x+","+s+")"),l.attr("x",o.x+5).attr("y",w+3).attr("transform","translate(14,14) rotate(45, "+o.x+","+s+")")}}}},"drawCommitTags"),Ut=h(e=>{switch(e.customType??e.type){case p.NORMAL:return"commit-normal";case p.REVERSE:return"commit-reverse";case p.HIGHLIGHT:return"commit-highlight";case p.MERGE:return"commit-merge";case p.CHERRY_PICK:return"commit-cherry-pick";default:return"commit-normal"}},"getCommitClassType"),Xt=h((e,t,o,s)=>{const r={x:0,y:0};if(e.parents.length>0){const a=X(e.parents);if(a){const c=s.get(a)??r;return t==="TB"?c.y+R:t==="BT"?(s.get(e.id)??r).y-R:c.x+R}}else return t==="TB"?H:t==="BT"?(s.get(e.id)??r).y-R:0;return 0},"calculatePosition"),Jt=h((e,t,o)=>{var c,n;const s=y==="BT"&&o?t:t+P,r=y==="TB"||y==="BT"?s:(c=B.get(e.branch))==null?void 0:c.pos,a=y==="TB"||y==="BT"?(n=B.get(e.branch))==null?void 0:n.pos:s;if(a===void 0||r===void 0)throw new Error(`Position were undefined for commit ${e.id}`);return{x:a,y:r,posWithOffset:s}},"getCommitPosition"),F=h((e,t,o)=>{if(!f)throw new Error("GitGraph config not found");const s=e.append("g").attr("class","commit-bullets"),r=e.append("g").attr("class","commit-labels");let a=y==="TB"||y==="BT"?H:0;const c=[...t.keys()],n=(f==null?void 0:f.parallelCommits)??!1,m=h(($,g)=>{var b,w;const d=(b=t.get($))==null?void 0:b.seq,x=(w=t.get(g))==null?void 0:w.seq;return d!==void 0&&x!==void 0?d-x:0},"sortKeys");let l=c.sort(m);y==="BT"&&(n&&Nt(l,t,a),l=l.reverse()),l.forEach($=>{var x;const g=t.get($);if(!g)throw new Error(`Commit not found for key ${$}`);n&&(a=Xt(g,y,a,C));const d=Jt(g,a,n);if(o){const b=Ut(g),w=g.customType??g.type,I=((x=B.get(g.branch))==null?void 0:x.index)??0;_t(s,g,d,b,I,w),Yt(r,g,d,a),Vt(r,g,d,a)}y==="TB"||y==="BT"?C.set(g.id,{x:d.x,y:d.posWithOffset}):C.set(g.id,{x:d.posWithOffset,y:d.y}),a=y==="BT"&&n?a+R:a+R+P,a>v&&(v=a)})},"drawCommits"),Qt=h((e,t,o,s,r)=>{const a=(y==="TB"||y==="BT"?o.x<s.x:o.y<s.y)?t.branch:e.branch,c=h(m=>m.branch===a,"isOnBranchToGetCurve"),n=h(m=>m.seq>e.seq&&m.seq<t.seq,"isBetweenCommits");return[...r.values()].some(m=>n(m)&&c(m))},"shouldRerouteArrow"),q=h((e,t,o=0)=>{const s=e+Math.abs(e-t)/2;if(o>5)return s;if(z.every(a=>Math.abs(a-s)>=10))return z.push(s),s;const r=Math.abs(e-t);return q(e,t-r/5,o+1)},"findLane"),Zt=h((e,t,o,s)=>{var x,b,w,I,j;const r=C.get(t.id),a=C.get(o.id);if(r===void 0||a===void 0)throw new Error(`Commit positions not found for commits ${t.id} and ${o.id}`);const c=Qt(t,o,r,a,s);let n="",m="",l=0,$=0,g=(x=B.get(o.branch))==null?void 0:x.index;o.type===p.MERGE&&t.id!==o.parents[0]&&(g=(b=B.get(t.branch))==null?void 0:b.index);let d;if(c){n="A 10 10, 0, 0, 0,",m="A 10 10, 0, 0, 1,",l=10,$=10;const M=r.y<a.y?q(r.y,a.y):q(a.y,r.y),E=r.x<a.x?q(r.x,a.x):q(a.x,r.x);y==="TB"?r.x<a.x?d=`M ${r.x} ${r.y} L ${E-l} ${r.y} ${m} ${E} ${r.y+$} L ${E} ${a.y-l} ${n} ${E+$} ${a.y} L ${a.x} ${a.y}`:(g=(w=B.get(t.branch))==null?void 0:w.index,d=`M ${r.x} ${r.y} L ${E+l} ${r.y} ${n} ${E} ${r.y+$} L ${E} ${a.y-l} ${m} ${E-$} ${a.y} L ${a.x} ${a.y}`):y==="BT"?r.x<a.x?d=`M ${r.x} ${r.y} L ${E-l} ${r.y} ${n} ${E} ${r.y-$} L ${E} ${a.y+l} ${m} ${E+$} ${a.y} L ${a.x} ${a.y}`:(g=(I=B.get(t.branch))==null?void 0:I.index,d=`M ${r.x} ${r.y} L ${E+l} ${r.y} ${m} ${E} ${r.y-$} L ${E} ${a.y+l} ${n} ${E-$} ${a.y} L ${a.x} ${a.y}`):r.y<a.y?d=`M ${r.x} ${r.y} L ${r.x} ${M-l} ${n} ${r.x+$} ${M} L ${a.x-l} ${M} ${m} ${a.x} ${M+$} L ${a.x} ${a.y}`:(g=(j=B.get(t.branch))==null?void 0:j.index,d=`M ${r.x} ${r.y} L ${r.x} ${M+l} ${m} ${r.x+$} ${M} L ${a.x-l} ${M} ${n} ${a.x} ${M-$} L ${a.x} ${a.y}`)}else n="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",l=20,$=20,y==="TB"?(r.x<a.x&&(o.type===p.MERGE&&t.id!==o.parents[0]?d=`M ${r.x} ${r.y} L ${r.x} ${a.y-l} ${n} ${r.x+$} ${a.y} L ${a.x} ${a.y}`:d=`M ${r.x} ${r.y} L ${a.x-l} ${r.y} ${m} ${a.x} ${r.y+$} L ${a.x} ${a.y}`),r.x>a.x&&(n="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",l=20,$=20,o.type===p.MERGE&&t.id!==o.parents[0]?d=`M ${r.x} ${r.y} L ${r.x} ${a.y-l} ${m} ${r.x-$} ${a.y} L ${a.x} ${a.y}`:d=`M ${r.x} ${r.y} L ${a.x+l} ${r.y} ${n} ${a.x} ${r.y+$} L ${a.x} ${a.y}`),r.x===a.x&&(d=`M ${r.x} ${r.y} L ${a.x} ${a.y}`)):y==="BT"?(r.x<a.x&&(o.type===p.MERGE&&t.id!==o.parents[0]?d=`M ${r.x} ${r.y} L ${r.x} ${a.y+l} ${m} ${r.x+$} ${a.y} L ${a.x} ${a.y}`:d=`M ${r.x} ${r.y} L ${a.x-l} ${r.y} ${n} ${a.x} ${r.y-$} L ${a.x} ${a.y}`),r.x>a.x&&(n="A 20 20, 0, 0, 0,",m="A 20 20, 0, 0, 1,",l=20,$=20,o.type===p.MERGE&&t.id!==o.parents[0]?d=`M ${r.x} ${r.y} L ${r.x} ${a.y+l} ${n} ${r.x-$} ${a.y} L ${a.x} ${a.y}`:d=`M ${r.x} ${r.y} L ${a.x-l} ${r.y} ${n} ${a.x} ${r.y-$} L ${a.x} ${a.y}`),r.x===a.x&&(d=`M ${r.x} ${r.y} L ${a.x} ${a.y}`)):(r.y<a.y&&(o.type===p.MERGE&&t.id!==o.parents[0]?d=`M ${r.x} ${r.y} L ${a.x-l} ${r.y} ${m} ${a.x} ${r.y+$} L ${a.x} ${a.y}`:d=`M ${r.x} ${r.y} L ${r.x} ${a.y-l} ${n} ${r.x+$} ${a.y} L ${a.x} ${a.y}`),r.y>a.y&&(o.type===p.MERGE&&t.id!==o.parents[0]?d=`M ${r.x} ${r.y} L ${a.x-l} ${r.y} ${n} ${a.x} ${r.y-$} L ${a.x} ${a.y}`:d=`M ${r.x} ${r.y} L ${r.x} ${a.y+l} ${m} ${r.x+$} ${a.y} L ${a.x} ${a.y}`),r.y===a.y&&(d=`M ${r.x} ${r.y} L ${a.x} ${a.y}`));if(d===void 0)throw new Error("Line definition not found");e.append("path").attr("d",d).attr("class","arrow arrow"+g%G)},"drawArrow"),te=h((e,t)=>{const o=e.append("g").attr("class","commit-arrows");[...t.keys()].forEach(s=>{const r=t.get(s);r.parents&&r.parents.length>0&&r.parents.forEach(a=>{Zt(o,t.get(a),r,t)})})},"drawArrows"),ee=h((e,t)=>{const o=e.append("g");t.forEach((s,r)=>{var x;const a=r%G,c=(x=B.get(s.name))==null?void 0:x.pos;if(c===void 0)throw new Error(`Position not found for branch ${s.name}`);const n=o.append("line");n.attr("x1",0),n.attr("y1",c),n.attr("x2",v),n.attr("y2",c),n.attr("class","branch branch"+a),y==="TB"?(n.attr("y1",H),n.attr("x1",c),n.attr("y2",v),n.attr("x2",c)):y==="BT"&&(n.attr("y1",v),n.attr("x1",c),n.attr("y2",H),n.attr("x2",c)),z.push(c);const m=s.name,l=U(m),$=o.insert("rect"),g=o.insert("g").attr("class","branchLabel").insert("g").attr("class","label branch-label"+a);g.node().appendChild(l);const d=l.getBBox();$.attr("class","branchLabelBkg label"+a).attr("rx",4).attr("ry",4).attr("x",-d.width-4-((f==null?void 0:f.rotateCommitLabel)===!0?30:0)).attr("y",-d.height/2+8).attr("width",d.width+18).attr("height",d.height+4),g.attr("transform","translate("+(-d.width-14-((f==null?void 0:f.rotateCommitLabel)===!0?30:0))+", "+(c-d.height/2-1)+")"),y==="TB"?($.attr("x",c-d.width/2-10).attr("y",0),g.attr("transform","translate("+(c-d.width/2-5)+", 0)")):y==="BT"?($.attr("x",c-d.width/2-10).attr("y",v),g.attr("transform","translate("+(c-d.width/2-5)+", "+v+")")):$.attr("transform","translate(-19, "+(c-d.height/2)+")")})},"drawBranches"),re=h(function(e,t,o,s,r){return B.set(e,{pos:t,index:o}),t+=50+(r?40:0)+(y==="TB"||y==="BT"?s.width/2:0),t},"setBranchPosition"),oe=h(function(e,t,o,s){if(St(),u.debug("in gitgraph renderer",e+`
`,"id:",t,o),!f)throw new Error("GitGraph config not found");const r=f.rotateCommitLabel??!1,a=s.db;O=a.getCommits();const c=a.getBranchesAsObjArray();y=a.getDirection();const n=nt(`[id="${t}"]`);let m=0;c.forEach((l,$)=>{var I;const g=U(l.name),d=n.append("g"),x=d.insert("g").attr("class","branchLabel"),b=x.insert("g").attr("class","label branch-label");(I=b.node())==null||I.appendChild(g);const w=g.getBBox();m=re(l.name,m,$,w,r),b.remove(),x.remove(),d.remove()}),F(n,O,!1),f.showBranches&&ee(n,c),te(n,O),F(n,O,!0),ct.insertTitle(n,"gitTitleText",f.titleTopMargin??0,a.getDiagramTitle()),it(void 0,n,f.diagramPadding,f.useMaxWidth)},"draw"),ae={draw:oe},se=h(e=>`
  .commit-id,
  .commit-msg,
  .branch-label {
    fill: lightgrey;
    color: lightgrey;
    font-family: 'trebuchet ms', verdana, arial, sans-serif;
    font-family: var(--mermaid-font-family);
  }
  ${[0,1,2,3,4,5,6,7].map(t=>`
        .branch-label${t} { fill: ${e["gitBranchLabel"+t]}; }
        .commit${t} { stroke: ${e["git"+t]}; fill: ${e["git"+t]}; }
        .commit-highlight${t} { stroke: ${e["gitInv"+t]}; fill: ${e["gitInv"+t]}; }
        .label${t}  { fill: ${e["git"+t]}; }
        .arrow${t} { stroke: ${e["git"+t]}; }
        `).join(`
`)}

  .branch {
    stroke-width: 1;
    stroke: ${e.lineColor};
    stroke-dasharray: 2;
  }
  .commit-label { font-size: ${e.commitLabelFontSize}; fill: ${e.commitLabelColor};}
  .commit-label-bkg { font-size: ${e.commitLabelFontSize}; fill: ${e.commitLabelBackground}; opacity: 0.5; }
  .tag-label { font-size: ${e.tagLabelFontSize}; fill: ${e.tagLabelColor};}
  .tag-label-bkg { fill: ${e.tagLabelBackground}; stroke: ${e.tagLabelBorder}; }
  .tag-hole { fill: ${e.textColor}; }

  .commit-merge {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
  }
  .commit-reverse {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
    stroke-width: 3;
  }
  .commit-highlight-outer {
  }
  .commit-highlight-inner {
    stroke: ${e.primaryColor};
    fill: ${e.primaryColor};
  }

  .arrow { stroke-width: 8; stroke-linecap: round; fill: none}
  .gitTitleText {
    text-anchor: middle;
    font-size: 18px;
    fill: ${e.textColor};
  }
`,"getStyles"),ne=se,ye={parser:zt,db:V,renderer:ae,styles:ne};export{ye as diagram};
