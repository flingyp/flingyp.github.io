import{_ as i,c as s,o as a,ag as e}from"./chunks/framework.BhcQuJV0.js";const k=JSON.parse('{"title":"代码提交规范化","description":"","frontmatter":{},"headers":[],"relativePath":"frontend/Engineering/CodeSubmit.md","filePath":"frontend/Engineering/CodeSubmit.md","lastUpdated":1741947028000}'),n={name:"frontend/Engineering/CodeSubmit.md"};function o(d,t,l,p,c,h){return a(),s("div",null,t[0]||(t[0]=[e(`<h1 id="代码提交规范化" tabindex="-1">代码提交规范化 <a class="header-anchor" href="#代码提交规范化" aria-label="Permalink to &quot;代码提交规范化&quot;">​</a></h1><p>代码提交规范化主要包括针对 <strong>代码提交的规范校验</strong>、<strong>提交信息规范校验</strong></p><h2 id="husky-lint-staged" tabindex="-1">Husky + Lint-Staged <a class="header-anchor" href="#husky-lint-staged" aria-label="Permalink to &quot;Husky + Lint-Staged&quot;">​</a></h2><p>集成代码提交规范主要是围绕着 Git Hooks 的钩子去工作，所以先简单的了解了解 Git Hooks</p><ul><li><code>pre-commit</code>：在 <code>git commit</code> 之前执行</li><li><code>commit-msg</code>：在 <code>git commit</code> 之前执行</li><li><code>post-merge</code>：在 <code>git commit</code> 执行后</li><li><code>pre-push</code>：在 <code>git push</code> 执行前</li></ul><h3 id="husky" tabindex="-1">Husky <a class="header-anchor" href="#husky" aria-label="Permalink to &quot;Husky&quot;">​</a></h3><p>Husky 可以让我们向项目中方便添加 Git Hooks。总结来说可以操作 Git 钩子的工具</p><p>安装 Husky：<code>npx husky-init &amp;&amp; npm install</code></p><p>执行上述命令后会在我们的根目录下生成 <code>.husky</code> 文件夹，这里面装的就是 <code>git hook</code> 的钩子函数执行文件，<code>pre-commit</code> 钩子是在提交信息前执行的，即在我们 <code>git commit</code> 的时候触发</p><p>同时会在 <code>package.json</code> 的 <code>scripts</code> 中生成一条新的命令：<code>&quot;prepare&quot;: &quot;husky install&quot;</code></p><h3 id="lint-staged" tabindex="-1">lint-staged <a class="header-anchor" href="#lint-staged" aria-label="Permalink to &quot;lint-staged&quot;">​</a></h3><p>lint-staged 只检测那些加入缓冲区的文件，本地暂存代码检查工具</p><p>安装 lint-staged：<code>pnpm install lint-staged -D</code></p><p>注：可以通过 <code>npx mrm@2 lint-staged</code> 这个命令会同时帮你安装 husky 和 lint-staged，并做好配置</p><p>接下来添加 package.json 文件添加代码：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 检查 src 所有目录下 js,jsx,ts,tsx,json 文件，执行下面的命令</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;lint-staged&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;src/**/*.{js,jsx,ts,tsx,json}&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prettier --write&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;eslint --cache --fix&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>再修改 pre-commit 文件</p><div class="language-sh vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sh</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">#!/bin/sh</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;$(</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">dirname</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">$0</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;)/_/husky.sh&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npx</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> lint-staged</span></span></code></pre></div><p>再进行测试 当我们 <code>git commit -m &#39;xx&#39;</code> 的时候 会先去执行 <code>npx lint-staged</code></p><h2 id="commitlint-commitizen" tabindex="-1">Commitlint + Commitizen <a class="header-anchor" href="#commitlint-commitizen" aria-label="Permalink to &quot;Commitlint + Commitizen&quot;">​</a></h2><ul><li><code>commitlint</code> 规范团队遵守提交信息的约定，信息检查工具</li><li><code>commitizen</code> 可以辅助我们，帮助我们填写规范的 commit 信息</li></ul><h3 id="commitlint" tabindex="-1">Commitlint <a class="header-anchor" href="#commitlint" aria-label="Permalink to &quot;Commitlint&quot;">​</a></h3><p>安装：<code>pnpm install @commitlint/cli @commitlint/config-conventional -D</code></p><p>执行命令 <code>echo &quot;module.exports = {extends: [&#39;@commitlint/config-conventional&#39;]}&quot; &gt; commitlint.config.js</code> 会在根目录创建 commitlint.config.js 配置文件</p><p>注意使用上面这条命令创建的配置文件不是 utf8 格式的，在进行 <code>git commit</code>的时候回报：<code>SyntaxError: Invalid or unexpected token</code>的错误。</p><p>所以最好的方式就是自己手动创建配置文件，然后写入上面这个代码：<code>module.exports = {extends: [&#39;@commitlint/config-conventional&#39;]}</code></p><p>commit 消息的书写格式： <code>type(必填): description</code></p><table tabindex="0"><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>revert</td><td>回滚到上一个版本</td></tr><tr><td>feat</td><td>新增功能</td></tr><tr><td>fix</td><td>修复 bug</td></tr><tr><td>docs</td><td>修改文档</td></tr><tr><td>test</td><td>测试用例的修改</td></tr><tr><td>refactor</td><td>代码重构，未新增任何功能和修复任何 bug</td></tr><tr><td>build</td><td>改变构建流程，新增依赖库、工具等（例如 webpack 修改)</td></tr><tr><td>style</td><td>仅仅修改了空格、缩进等，不改变代码逻辑</td></tr><tr><td>perf</td><td>改善性能和体现的修改</td></tr><tr><td>chore</td><td>修改构建流程或工具</td></tr><tr><td>ci</td><td>自动化流程配置修改</td></tr></tbody></table><h3 id="commitizen" tabindex="-1">Commitizen <a class="header-anchor" href="#commitizen" aria-label="Permalink to &quot;Commitizen&quot;">​</a></h3><p>安装：<code>npm install commitizen cz-conventional-changelog -D</code></p><p>设置一条脚本：<code>npm set-script commit &quot;git-cz&quot;</code></p><p>配置 package.json 的提交信息：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;config&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;commitizen&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">      &quot;path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;cz-conventional-changelog&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>之后只同 执行脚本 commit 去填写 commit 信息</p>`,34)]))}const m=i(n,[["render",o]]);export{k as __pageData,m as default};
