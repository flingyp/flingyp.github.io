import{_ as s,c as a,o as n,X as l}from"./chunks/framework.12317601.js";const B=JSON.parse('{"title":"第一篇：框架设计概览","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"books/vue_design_realize/框架设计概览.md","filePath":"books/vue_design_realize/框架设计概览.md"}'),p={name:"books/vue_design_realize/框架设计概览.md"},o=l(`<h1 id="第一篇-框架设计概览" tabindex="-1">第一篇：框架设计概览 <a class="header-anchor" href="#第一篇-框架设计概览" aria-label="Permalink to &quot;第一篇：框架设计概览&quot;">​</a></h1><h2 id="第一章-权衡的艺术" tabindex="-1">第一章：权衡的艺术 <a class="header-anchor" href="#第一章-权衡的艺术" aria-label="Permalink to &quot;第一章：权衡的艺术&quot;">​</a></h2><h3 id="命令式和声明式" tabindex="-1">命令式和声明式 <a class="header-anchor" href="#命令式和声明式" aria-label="Permalink to &quot;命令式和声明式&quot;">​</a></h3><p>从范式上来看，视图层框架通常分为命令式和声明式。早年间流行的 Jquery 就是典型的命令式框架</p><p>而命令式框架的一大特点就是关注过程，而声明式框架更加关注结果</p><p><strong>命令式框架</strong>：简单来说自然语言所描述的能够与代码产生一一对应关系，代码本身描述的是做事的过程，就更加符合我们的逻辑知觉</p><p><strong>声明式框架</strong>：简单来说 Vue.js 帮我们封装了过程， Vue.js 内部实现也是命令式的，而暴露给用户的却更加声明式</p><h3 id="性能与可维护的权衡" tabindex="-1">性能与可维护的权衡 <a class="header-anchor" href="#性能与可维护的权衡" aria-label="Permalink to &quot;性能与可维护的权衡&quot;">​</a></h3><p>命令式和声明式各有缺点。在框架设计方面，则体现在性能与可维护性之间的权衡</p><p><strong>声明式代码的性能不优于命令式代码的性能，而声明式代码的可维护性更强</strong></p><p>这就体现了在框架设计层面上要做出关于可维护性与性能之间的权衡。在采用声明式提示可维护性的同时，性能就会有一定的损失，而框架的设计者要做的就是：<strong>在保持可维护性的同时让性能损失最小化</strong></p><h3 id="虚拟-dom-的性能到底如何" tabindex="-1">虚拟 DOM 的性能到底如何 <a class="header-anchor" href="#虚拟-dom-的性能到底如何" aria-label="Permalink to &quot;虚拟 DOM 的性能到底如何&quot;">​</a></h3><p><strong>声明式代码的更新性能消耗 = 找出差异的性能消耗 + 直接修改的性能消耗</strong></p><p>因此，如果我们能够最小化找出差异的性能消耗，就可以让声明式代码的性能无限接近命令式代码的性能。而所谓的虚拟 DOM，就是为了最小化找出差异这一步的性能消耗而出现的</p><h3 id="运行时和编译时" tabindex="-1">运行时和编译时 <a class="header-anchor" href="#运行时和编译时" aria-label="Permalink to &quot;运行时和编译时&quot;">​</a></h3><p>Vue.js 是一个编译时+运行时的框架，它在保持灵活性的基础上还能够通过编译手段分析用户提供的内容，从而进一步提升更新性能</p><p>Compiler 编译时：把 HTML 标签编译成树形结构的虚拟 DOM</p><p>Runtime 运行时：将虚拟 DOM 通过渲染函数转换为真实 DOM，渲染在页面上</p><h2 id="第二章-框架设计的核心要素" tabindex="-1">第二章：框架设计的核心要素 <a class="header-anchor" href="#第二章-框架设计的核心要素" aria-label="Permalink to &quot;第二章：框架设计的核心要素&quot;">​</a></h2><h3 id="提升用户开发体验" tabindex="-1">提升用户开发体验 <a class="header-anchor" href="#提升用户开发体验" aria-label="Permalink to &quot;提升用户开发体验&quot;">​</a></h3><p>衡量一个框架是否足够优秀的指标之一就是看它的开发体验如何</p><p>在框架设计和开发过程中，提供友好的警告信息至关重要。如果这一点都做得不好，那么很可能会收到用户的抱怨。始终提供友好的警告信息不仅能够帮助用户快速定位问题，节省用户的时间，还能够让框架收获良好的口碑，让用户认可框架的专业性</p><h3 id="控制框架代码的体积" tabindex="-1">控制框架代码的体积 <a class="header-anchor" href="#控制框架代码的体积" aria-label="Permalink to &quot;控制框架代码的体积&quot;">​</a></h3><p>框架的大小也是衡量框架的标准之一。在实现同样功能的情况下，当然是用的代码越少越好，这样体积就会越小</p><p>如果去看 Vue.js 的源码，就会发现每一个 warn 函数的调用都会配合 <code>__DEV__</code> 常量的检查</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#4D9375;">if</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span><span style="color:#BD976A;">__DEV__</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">&amp;&amp;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">!</span><span style="color:#BD976A;">res</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">warn</span><span style="color:#666666;">(</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#C98A7D99;">\`</span><span style="color:#C98A7D;">Failed to mount app: mount target selector &quot;</span><span style="color:#666666;">\${</span><span style="color:#C98A7D;">container</span><span style="color:#666666;">}</span><span style="color:#C98A7D;">&quot; returned null.</span><span style="color:#C98A7D99;">\`</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">__DEV__</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">&amp;&amp;</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">!</span><span style="color:#B07D48;">res</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">warn</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B5695999;">\`</span><span style="color:#B56959;">Failed to mount app: mount target selector &quot;</span><span style="color:#999999;">\${</span><span style="color:#B56959;">container</span><span style="color:#999999;">}</span><span style="color:#B56959;">&quot; returned null.</span><span style="color:#B5695999;">\`</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>在开发环境下 <code>__DEV__</code> 常量设置为 true，上面的代码才有可能去执行</p><p>在生产环境下 <code>__DEV__</code> 常量设置为 false，上面的代码永远都不会执行，而这段代码就被称为 <strong>Dead Code</strong>，它不会出现在最终产物中，在构建资源的时候就会被移除。</p><p>这样就做到了 <strong>在开发环境中为用户提供良好的警告信息的同时，不会增加生产环境代码的体积</strong></p><h3 id="框架要做到良好的-tree-shaking" tabindex="-1">框架要做到良好的 Tree-Shaking <a class="header-anchor" href="#框架要做到良好的-tree-shaking" aria-label="Permalink to &quot;框架要做到良好的 Tree-Shaking&quot;">​</a></h3><p>这个概念因为 Rollup.js 而普及。简单来说 Tree-Shaking 指的就是消除那些永远不会被执行的代码</p><p>想要实现 Tree-Shaking，必须满足一个条件就是，即模块必须是 ESM，因为 Tree-Shaking 依赖 ESM 的静态结构</p><h3 id="框架应该输出怎样的构建产物" tabindex="-1">框架应该输出怎样的构建产物 <a class="header-anchor" href="#框架应该输出怎样的构建产物" aria-label="Permalink to &quot;框架应该输出怎样的构建产物&quot;">​</a></h3><p>Vue.js 构建产物除了有环境上的区分之外，还会根据使用场景的不同而输出其他形式的产物</p><p>第一种 IIFE 格式：全称 <strong>Immediately Invoked Function Expression</strong> 即立即调用的函数表达式。用户希望可以直接在 HTML 页面中使用 <code>&lt;script&gt;</code> 标签引入框架并且使用</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#666666;">&lt;</span><span style="color:#4D9375;">script</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">src</span><span style="color:#666666;">=</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">./vue.global.prod.js</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">&gt;&lt;/</span><span style="color:#4D9375;">script</span><span style="color:#666666;">&gt;</span></span>
<span class="line"><span style="color:#666666;">&lt;</span><span style="color:#4D9375;">script</span><span style="color:#666666;">&gt;</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">const</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">createApp</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">Vue</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#666666;">&lt;/</span><span style="color:#4D9375;">script</span><span style="color:#666666;">&gt;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#999999;">&lt;</span><span style="color:#1E754F;">script</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">src</span><span style="color:#999999;">=</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">./vue.global.prod.js</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">&gt;&lt;/</span><span style="color:#1E754F;">script</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#999999;">&lt;</span><span style="color:#1E754F;">script</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">createApp</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#999999;">=</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">Vue</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#999999;">&lt;/</span><span style="color:#1E754F;">script</span><span style="color:#999999;">&gt;</span></span></code></pre></div><p>第二种 ESM 格式：现在的主流浏览器对原生 ESM 的支持都不错，可以直接引入 ESM 格式的资源</p><div class="language-html vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#666666;">&lt;</span><span style="color:#4D9375;">script</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">src</span><span style="color:#666666;">=</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">./vue.global.prod.js</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">type</span><span style="color:#666666;">=</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">module</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">&gt;&lt;/</span><span style="color:#4D9375;">script</span><span style="color:#666666;">&gt;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#999999;">&lt;</span><span style="color:#1E754F;">script</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">src</span><span style="color:#999999;">=</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">./vue.global.prod.js</span><span style="color:#B5695999;">&quot;</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">type</span><span style="color:#999999;">=</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">module</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">&gt;&lt;/</span><span style="color:#1E754F;">script</span><span style="color:#999999;">&gt;</span></span></code></pre></div><p>第三种 CommonJs 格式：是在 Nodejs 环境中运行的，而非浏览器环境。服务端渲染会使用到</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">const </span><span style="color:#BD976A;">Vue</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#80A665;">require</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">vue</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">);</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">Vue</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#59873A;">require</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">vue</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">);</span></span></code></pre></div><h3 id="特性开关" tabindex="-1">特性开关 <a class="header-anchor" href="#特性开关" aria-label="Permalink to &quot;特性开关&quot;">​</a></h3><p>在设计框架中，框架会给用户提供诸多特性（或功能），例如我们提供 A、B、C 三个特性给用户。同时还提供了 a、b、c 三个对应的特性开关，用户可以通过设置开关来代表开启或关闭对应的特性，这会带来很多益处</p><ol><li>对应关闭的特性，可以利用 Tree-Shaking 机制让其不包含在最终的资源中</li><li>该机制为框架设计带来了灵活性</li></ol><h3 id="错误处理" tabindex="-1">错误处理 <a class="header-anchor" href="#错误处理" aria-label="Permalink to &quot;错误处理&quot;">​</a></h3><p>框架错误处理机制的好坏直接决定了用户应用程序的健壮性，还决定了用户开发时处理错误的心智负担</p><h3 id="良好的-typescript-类型支持" tabindex="-1">良好的 TypeScript 类型支持 <a class="header-anchor" href="#良好的-typescript-类型支持" aria-label="Permalink to &quot;良好的 TypeScript 类型支持&quot;">​</a></h3><h2 id="第三章-vue3-的设计思路" tabindex="-1">第三章：Vue3 的设计思路 <a class="header-anchor" href="#第三章-vue3-的设计思路" aria-label="Permalink to &quot;第三章：Vue3 的设计思路&quot;">​</a></h2><h3 id="声明式地描述-ui" tabindex="-1">声明式地描述 UI <a class="header-anchor" href="#声明式地描述-ui" aria-label="Permalink to &quot;声明式地描述 UI&quot;">​</a></h3><p>Vue3 是一个声明式的 UI 框架，意思就是说用户在使用 Vue3 开发页面时是使用声明式描述 UI 的</p><p>例如 Vue.js 模板是这样的</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#666666;">&lt;</span><span style="color:#4D9375;">template</span><span style="color:#666666;">&gt;</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">&lt;</span><span style="color:#4D9375;">h1</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">@click</span><span style="color:#666666;">=</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">handler</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">&gt;</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#666666;">&lt;</span><span style="color:#4D9375;">span</span><span style="color:#666666;">&gt;&lt;/</span><span style="color:#4D9375;">span</span><span style="color:#666666;">&gt;</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">&lt;/</span><span style="color:#4D9375;">h1</span><span style="color:#666666;">&gt;</span></span>
<span class="line"><span style="color:#666666;">&lt;/</span><span style="color:#4D9375;">template</span><span style="color:#666666;">&gt;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#999999;">&lt;</span><span style="color:#1E754F;">template</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">&lt;</span><span style="color:#1E754F;">h1</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">@click</span><span style="color:#999999;">=</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">handler</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">&lt;</span><span style="color:#1E754F;">span</span><span style="color:#999999;">&gt;&lt;/</span><span style="color:#1E754F;">span</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">&lt;/</span><span style="color:#1E754F;">h1</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#999999;">&lt;/</span><span style="color:#1E754F;">template</span><span style="color:#999999;">&gt;</span></span></code></pre></div><p>那么通过 JavaScript 对象来描述，代码如下所示：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">const </span><span style="color:#BD976A;">title</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#B8A965;">tag</span><span style="color:#666666;">: </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">h1</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#B8A965;">props</span><span style="color:#666666;">: {</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#B8A965;">onClick</span><span style="color:#666666;">: </span><span style="color:#BD976A;">handler</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#666666;">  },</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#B8A965;">children</span><span style="color:#666666;">: [{ </span><span style="color:#B8A965;">tag</span><span style="color:#666666;">: </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">span</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;"> }],</span></span>
<span class="line"><span style="color:#666666;">};</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">title</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">tag</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">h1</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">props</span><span style="color:#999999;">: {</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">onClick</span><span style="color:#999999;">: </span><span style="color:#B07D48;">handler</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  },</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#998418;">children</span><span style="color:#999999;">: [{ </span><span style="color:#998418;">tag</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">span</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;"> }],</span></span>
<span class="line"><span style="color:#999999;">};</span></span></code></pre></div><p>而使用 JavaScript 对象来描述，其实就是所谓的<strong>虚拟 DOM</strong></p><p>Vue3 除了支持使用模板描述 UI 外，还支持使用虚拟 DOM 描述 UI。其实我们在 Vue.js 组件中书写的渲染函数就是使用虚拟 DOM 来描述 UI 的</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#666666;">&lt;</span><span style="color:#4D9375;">script</span><span style="color:#666666;">&gt;</span></span>
<span class="line"><span style="color:#4D9375;">import</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">h</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">from</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">vue</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">;</span></span>
<span class="line"><span style="color:#4D9375;">export</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">default</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#80A665;">render</span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#758575DD;">// h() 函数就是一个辅助创建虚拟DOM的工具函数</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#4D9375;">return</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">h</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">h1</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span><span style="color:#DBD7CAEE;"> </span><span style="color:#B8A965;">onClick</span><span style="color:#666666;">:</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">handler</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">});</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">},</span></span>
<span class="line"><span style="color:#666666;">};</span></span>
<span class="line"><span style="color:#666666;">&lt;/</span><span style="color:#4D9375;">script</span><span style="color:#666666;">&gt;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#999999;">&lt;</span><span style="color:#1E754F;">script</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#1E754F;">import</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">h</span><span style="color:#393A34;"> </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">from</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">vue</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">;</span></span>
<span class="line"><span style="color:#1E754F;">export</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">default</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#59873A;">render</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// h() 函数就是一个辅助创建虚拟DOM的工具函数</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#59873A;">h</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">h1</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span><span style="color:#393A34;"> </span><span style="color:#998418;">onClick</span><span style="color:#999999;">:</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">handler</span><span style="color:#393A34;"> </span><span style="color:#999999;">});</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">},</span></span>
<span class="line"><span style="color:#999999;">};</span></span>
<span class="line"><span style="color:#999999;">&lt;/</span><span style="color:#1E754F;">script</span><span style="color:#999999;">&gt;</span></span></code></pre></div><p><strong>组件的渲染函数</strong>：一个组件要渲染的内容是通过渲染函数来描述的，也就是上面代码的 render 函数，Vue.js 会根据组件的渲染函数的返回值拿到虚拟 DOM，然后就可以吧组件的内容渲染出来了</p><h3 id="初始渲染器" tabindex="-1">初始渲染器 <a class="header-anchor" href="#初始渲染器" aria-label="Permalink to &quot;初始渲染器&quot;">​</a></h3><p>虚拟 DOM 是如何变成真实的 DOM 并且渲染到浏览器页面中的呢？这就需要用到我们的渲染器</p><p><strong>渲染器的作用就是把虚拟 DOM 渲染为真实 DOM</strong></p><p>假设我们有如下的虚拟 DOM</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">const </span><span style="color:#BD976A;">vnode</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#B8A965;">tag</span><span style="color:#666666;">: </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">div</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#BD976A;">props</span><span style="color:#666666;">: {</span></span>
<span class="line"><span style="color:#666666;">        </span><span style="color:#80A665;">onClick</span><span style="color:#666666;">: () =&gt; </span><span style="color:#80A665;">alert</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">hello</span><span style="color:#C98A7D99;">&#39;</span><span style="color:#666666;">)</span></span>
<span class="line"><span style="color:#666666;">    },</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#B8A965;">children</span><span style="color:#666666;">: </span><span style="color:#C98A7D99;">&#39;</span><span style="color:#C98A7D;">click me</span><span style="color:#C98A7D99;">&#39;</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#B07D48;">vnode</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">tag</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">div</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#B07D48;">props</span><span style="color:#999999;">: {</span></span>
<span class="line"><span style="color:#999999;">        </span><span style="color:#59873A;">onClick</span><span style="color:#999999;">: () =&gt; </span><span style="color:#59873A;">alert</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">hello</span><span style="color:#B5695999;">&#39;</span><span style="color:#999999;">)</span></span>
<span class="line"><span style="color:#999999;">    },</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">children</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&#39;</span><span style="color:#B56959;">click me</span><span style="color:#B5695999;">&#39;</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>接下来编写一个简单的渲染器，将上面的虚拟 DOM 渲染为真实 DOM</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#758575DD;">/**</span></span>
<span class="line"><span style="color:#758575DD;"> * vnode: 虚拟DOM</span></span>
<span class="line"><span style="color:#758575DD;"> * container：挂载的容器</span></span>
<span class="line"><span style="color:#758575DD;"> */</span></span>
<span class="line"><span style="color:#CB7676;">function</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">renderer</span><span style="color:#666666;">(</span><span style="color:#BD976A;">vnode</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">container</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#758575DD;">// 使用 vnode.tag 作为标签名称创建DOM元素</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#CB7676;">const </span><span style="color:#BD976A;">el</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> </span><span style="color:#BD976A;">document</span><span style="color:#666666;">.</span><span style="color:#80A665;">createElement</span><span style="color:#666666;">(</span><span style="color:#BD976A;">vnode</span><span style="color:#666666;">.</span><span style="color:#BD976A;">tag</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#4D9375;">for</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span><span style="color:#CB7676;">const </span><span style="color:#BD976A;">key</span><span style="color:#CB7676;"> in</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">vnode</span><span style="color:#666666;">.</span><span style="color:#BD976A;">props</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#4D9375;">if</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">/</span><span style="color:#4D9375;">^</span><span style="color:#C4704F;">on</span><span style="color:#C98A7D99;">/</span><span style="color:#666666;">.</span><span style="color:#80A665;">test</span><span style="color:#666666;">(</span><span style="color:#BD976A;">key</span><span style="color:#666666;">))</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">      </span><span style="color:#BD976A;">al</span><span style="color:#666666;">.</span><span style="color:#80A665;">addEventListener</span><span style="color:#666666;">(</span></span>
<span class="line"><span style="color:#DBD7CAEE;">        </span><span style="color:#BD976A;">key</span><span style="color:#666666;">.</span><span style="color:#80A665;">substr</span><span style="color:#666666;">(</span><span style="color:#4C9A91;">2</span><span style="color:#666666;">).</span><span style="color:#80A665;">toLowerCase</span><span style="color:#666666;">(),</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 事件名称</span></span>
<span class="line"><span style="color:#DBD7CAEE;">        </span><span style="color:#BD976A;">vnode</span><span style="color:#666666;">.</span><span style="color:#BD976A;">props</span><span style="color:#666666;">[</span><span style="color:#BD976A;">key</span><span style="color:#666666;">]</span><span style="color:#DBD7CAEE;"> </span><span style="color:#758575DD;">// 事件处理函数</span></span>
<span class="line"><span style="color:#DBD7CAEE;">      </span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#666666;">}</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#4D9375;">if</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span><span style="color:#CB7676;">typeof</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">vnode</span><span style="color:#666666;">.</span><span style="color:#BD976A;">children</span><span style="color:#DBD7CAEE;"> </span><span style="color:#CB7676;">===</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">string</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#758575DD;">// 如果是字符串，则它是文本子节点</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#BD976A;">el</span><span style="color:#666666;">.</span><span style="color:#80A665;">appendChild</span><span style="color:#666666;">(</span><span style="color:#BD976A;">document</span><span style="color:#666666;">.</span><span style="color:#80A665;">createTextNode</span><span style="color:#666666;">(</span><span style="color:#BD976A;">vnode</span><span style="color:#666666;">.</span><span style="color:#BD976A;">children</span><span style="color:#666666;">));</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">}</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">else</span><span style="color:#DBD7CAEE;"> </span><span style="color:#4D9375;">if</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">(</span><span style="color:#BD976A;">Array</span><span style="color:#666666;">.</span><span style="color:#80A665;">isArray</span><span style="color:#666666;">(</span><span style="color:#BD976A;">vnode</span><span style="color:#666666;">.</span><span style="color:#BD976A;">children</span><span style="color:#666666;">))</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#758575DD;">// 递归调用 renderer函数渲染子节点，使用当前元素 el 作为挂载点</span></span>
<span class="line"><span style="color:#DBD7CAEE;">    </span><span style="color:#BD976A;">vnode</span><span style="color:#666666;">.</span><span style="color:#BD976A;">children</span><span style="color:#666666;">.</span><span style="color:#80A665;">forEach</span><span style="color:#666666;">((</span><span style="color:#BD976A;">child</span><span style="color:#666666;">)</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">=&gt;</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">renderer</span><span style="color:#666666;">(</span><span style="color:#BD976A;">child</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">el</span><span style="color:#666666;">));</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#666666;">  </span><span style="color:#758575DD;">// 将元素添加到挂载点下</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#BD976A;">container</span><span style="color:#666666;">.</span><span style="color:#80A665;">appendChild</span><span style="color:#666666;">(</span><span style="color:#BD976A;">el</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#A0ADA0;">/**</span></span>
<span class="line"><span style="color:#A0ADA0;"> * vnode: 虚拟DOM</span></span>
<span class="line"><span style="color:#A0ADA0;"> * container：挂载的容器</span></span>
<span class="line"><span style="color:#A0ADA0;"> */</span></span>
<span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">renderer</span><span style="color:#999999;">(</span><span style="color:#B07D48;">vnode</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">container</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 使用 vnode.tag 作为标签名称创建DOM元素</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">el</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> </span><span style="color:#B07D48;">document</span><span style="color:#999999;">.</span><span style="color:#59873A;">createElement</span><span style="color:#999999;">(</span><span style="color:#B07D48;">vnode</span><span style="color:#999999;">.</span><span style="color:#B07D48;">tag</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">for</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">const </span><span style="color:#B07D48;">key</span><span style="color:#AB5959;"> in</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">vnode</span><span style="color:#999999;">.</span><span style="color:#B07D48;">props</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B5695999;">/</span><span style="color:#1E754F;">^</span><span style="color:#AB5E3F;">on</span><span style="color:#B5695999;">/</span><span style="color:#999999;">.</span><span style="color:#59873A;">test</span><span style="color:#999999;">(</span><span style="color:#B07D48;">key</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#B07D48;">al</span><span style="color:#999999;">.</span><span style="color:#59873A;">addEventListener</span><span style="color:#999999;">(</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B07D48;">key</span><span style="color:#999999;">.</span><span style="color:#59873A;">substr</span><span style="color:#999999;">(</span><span style="color:#2F798A;">2</span><span style="color:#999999;">).</span><span style="color:#59873A;">toLowerCase</span><span style="color:#999999;">(),</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 事件名称</span></span>
<span class="line"><span style="color:#393A34;">        </span><span style="color:#B07D48;">vnode</span><span style="color:#999999;">.</span><span style="color:#B07D48;">props</span><span style="color:#999999;">[</span><span style="color:#B07D48;">key</span><span style="color:#999999;">]</span><span style="color:#393A34;"> </span><span style="color:#A0ADA0;">// 事件处理函数</span></span>
<span class="line"><span style="color:#393A34;">      </span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#999999;">}</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#AB5959;">typeof</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">vnode</span><span style="color:#999999;">.</span><span style="color:#B07D48;">children</span><span style="color:#393A34;"> </span><span style="color:#AB5959;">===</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">string</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 如果是字符串，则它是文本子节点</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">el</span><span style="color:#999999;">.</span><span style="color:#59873A;">appendChild</span><span style="color:#999999;">(</span><span style="color:#B07D48;">document</span><span style="color:#999999;">.</span><span style="color:#59873A;">createTextNode</span><span style="color:#999999;">(</span><span style="color:#B07D48;">vnode</span><span style="color:#999999;">.</span><span style="color:#B07D48;">children</span><span style="color:#999999;">));</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">else</span><span style="color:#393A34;"> </span><span style="color:#1E754F;">if</span><span style="color:#393A34;"> </span><span style="color:#999999;">(</span><span style="color:#B07D48;">Array</span><span style="color:#999999;">.</span><span style="color:#59873A;">isArray</span><span style="color:#999999;">(</span><span style="color:#B07D48;">vnode</span><span style="color:#999999;">.</span><span style="color:#B07D48;">children</span><span style="color:#999999;">))</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#A0ADA0;">// 递归调用 renderer函数渲染子节点，使用当前元素 el 作为挂载点</span></span>
<span class="line"><span style="color:#393A34;">    </span><span style="color:#B07D48;">vnode</span><span style="color:#999999;">.</span><span style="color:#B07D48;">children</span><span style="color:#999999;">.</span><span style="color:#59873A;">forEach</span><span style="color:#999999;">((</span><span style="color:#B07D48;">child</span><span style="color:#999999;">)</span><span style="color:#393A34;"> </span><span style="color:#999999;">=&gt;</span><span style="color:#393A34;"> </span><span style="color:#59873A;">renderer</span><span style="color:#999999;">(</span><span style="color:#B07D48;">child</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">el</span><span style="color:#999999;">));</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#999999;">  </span><span style="color:#A0ADA0;">// 将元素添加到挂载点下</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#B07D48;">container</span><span style="color:#999999;">.</span><span style="color:#59873A;">appendChild</span><span style="color:#999999;">(</span><span style="color:#B07D48;">el</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>之后就可以调用渲染器函数</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#80A665;">renderer</span><span style="color:#666666;">(</span><span style="color:#BD976A;">vnode</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">document</span><span style="color:#666666;">.</span><span style="color:#BD976A;">body</span><span style="color:#666666;">);</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#59873A;">renderer</span><span style="color:#999999;">(</span><span style="color:#B07D48;">vnode</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">document</span><span style="color:#999999;">.</span><span style="color:#B07D48;">body</span><span style="color:#999999;">);</span></span></code></pre></div><p>总结：渲染器的工作原理归根结底，都是使用一些熟悉的 DOM 操作 API 来完成渲染工作</p><h3 id="组件的本质" tabindex="-1">组件的本质 <a class="header-anchor" href="#组件的本质" aria-label="Permalink to &quot;组件的本质&quot;">​</a></h3><p>组件就是一组 DOM 元素的封装，一组 DOM 元素就是组件要渲染的内容。因为可以定义一个函数来代表组件，而函数的返回值就代表组件要渲染的内容</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">const </span><span style="color:#80A665;">MyComponent</span><span style="color:#CB7676;"> </span><span style="color:#666666;">=</span><span style="color:#CB7676;"> function </span><span style="color:#666666;">()</span><span style="color:#CB7676;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#CB7676;">  </span><span style="color:#4D9375;">return</span><span style="color:#CB7676;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#B8A965;">tag</span><span style="color:#666666;">: </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">div</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#B8A965;">props</span><span style="color:#666666;">: {</span></span>
<span class="line"><span style="color:#666666;">      </span><span style="color:#80A665;">onClick</span><span style="color:#666666;">: () =&gt; </span><span style="color:#80A665;">alert</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">hello</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">),</span></span>
<span class="line"><span style="color:#666666;">    },</span></span>
<span class="line"><span style="color:#666666;">    </span><span style="color:#B8A965;">children</span><span style="color:#666666;">: </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">click me</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span></span>
<span class="line"><span style="color:#666666;">  };</span></span>
<span class="line"><span style="color:#666666;">};</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">const </span><span style="color:#59873A;">MyComponent</span><span style="color:#AB5959;"> </span><span style="color:#999999;">=</span><span style="color:#AB5959;"> function </span><span style="color:#999999;">()</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#AB5959;">  </span><span style="color:#1E754F;">return</span><span style="color:#AB5959;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">tag</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">div</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">props</span><span style="color:#999999;">: {</span></span>
<span class="line"><span style="color:#999999;">      </span><span style="color:#59873A;">onClick</span><span style="color:#999999;">: () =&gt; </span><span style="color:#59873A;">alert</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">hello</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">),</span></span>
<span class="line"><span style="color:#999999;">    },</span></span>
<span class="line"><span style="color:#999999;">    </span><span style="color:#998418;">children</span><span style="color:#999999;">: </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">click me</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span></span>
<span class="line"><span style="color:#999999;">  };</span></span>
<span class="line"><span style="color:#999999;">};</span></span></code></pre></div><p>可以看到，组件的返回值也是虚拟 DOM，它代表组件要渲染的内容</p><h3 id="模板的工作原理" tabindex="-1">模板的工作原理 <a class="header-anchor" href="#模板的工作原理" aria-label="Permalink to &quot;模板的工作原理&quot;">​</a></h3><p>无论是手写虚拟 DOM 还是使用模板，都属于声明式描述 UI，那么模板是如何工作的呢？</p><p>这就要提到 Vue 的另一个重要组成部分：<strong>编译器</strong>。而它的作用其实就是将模板编译为渲染函数</p><div class="language-vue vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">vue</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#666666;">&lt;</span><span style="color:#4D9375;">template</span><span style="color:#666666;">&gt;</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#666666;">&lt;</span><span style="color:#4D9375;">div</span><span style="color:#DBD7CAEE;"> </span><span style="color:#BD976A;">@click</span><span style="color:#666666;">=</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">handler</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">&gt;</span><span style="color:#DBD7CAEE;">Click Me</span><span style="color:#666666;">&lt;/</span><span style="color:#4D9375;">div</span><span style="color:#666666;">&gt;</span></span>
<span class="line"><span style="color:#666666;">&lt;/</span><span style="color:#4D9375;">template</span><span style="color:#666666;">&gt;</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#999999;">&lt;</span><span style="color:#1E754F;">template</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#999999;">&lt;</span><span style="color:#1E754F;">div</span><span style="color:#393A34;"> </span><span style="color:#B07D48;">@click</span><span style="color:#999999;">=</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">handler</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">&gt;</span><span style="color:#393A34;">Click Me</span><span style="color:#999999;">&lt;/</span><span style="color:#1E754F;">div</span><span style="color:#999999;">&gt;</span></span>
<span class="line"><span style="color:#999999;">&lt;/</span><span style="color:#1E754F;">template</span><span style="color:#999999;">&gt;</span></span></code></pre></div><p>通过编译器需要编译成如下代码：</p><div class="language-ts vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki vitesse-dark vp-code-dark"><code><span class="line"><span style="color:#CB7676;">function</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">render</span><span style="color:#666666;">()</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{</span></span>
<span class="line"><span style="color:#DBD7CAEE;">  </span><span style="color:#4D9375;">return</span><span style="color:#DBD7CAEE;"> </span><span style="color:#80A665;">h</span><span style="color:#666666;">(</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">div</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">,</span><span style="color:#DBD7CAEE;"> </span><span style="color:#666666;">{ </span><span style="color:#B8A965;">onClick</span><span style="color:#666666;">: </span><span style="color:#BD976A;">handler</span><span style="color:#666666;"> },</span><span style="color:#DBD7CAEE;"> </span><span style="color:#C98A7D99;">&quot;</span><span style="color:#C98A7D;">Click Me</span><span style="color:#C98A7D99;">&quot;</span><span style="color:#666666;">);</span></span>
<span class="line"><span style="color:#666666;">}</span></span></code></pre><pre class="shiki vitesse-light vp-code-light"><code><span class="line"><span style="color:#AB5959;">function</span><span style="color:#393A34;"> </span><span style="color:#59873A;">render</span><span style="color:#999999;">()</span><span style="color:#393A34;"> </span><span style="color:#999999;">{</span></span>
<span class="line"><span style="color:#393A34;">  </span><span style="color:#1E754F;">return</span><span style="color:#393A34;"> </span><span style="color:#59873A;">h</span><span style="color:#999999;">(</span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">div</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">,</span><span style="color:#393A34;"> </span><span style="color:#999999;">{ </span><span style="color:#998418;">onClick</span><span style="color:#999999;">: </span><span style="color:#B07D48;">handler</span><span style="color:#999999;"> },</span><span style="color:#393A34;"> </span><span style="color:#B5695999;">&quot;</span><span style="color:#B56959;">Click Me</span><span style="color:#B5695999;">&quot;</span><span style="color:#999999;">);</span></span>
<span class="line"><span style="color:#999999;">}</span></span></code></pre></div><p>无论是模板还是直接手写渲染函数，对于一个组件来说，它要渲染的内容最终都是通过渲染函数产生的，然后渲染器再把渲染函数返回的虚拟 DOM 渲染为真实 DOM，这就是模板的工作原理，也是 Vue 渲染页面的流程</p><h3 id="vue-js-是各个模板组件的有机整体" tabindex="-1">Vue.js 是各个模板组件的有机整体 <a class="header-anchor" href="#vue-js-是各个模板组件的有机整体" aria-label="Permalink to &quot;Vue.js 是各个模板组件的有机整体&quot;">​</a></h3><p>如前所诉，组件的实现依赖于渲染器，模板的编译依赖于编译器。它们共同构成一个有机的整体，不同模块组件相互配合，进一步提升框架性能</p>`,80),e=[o];function t(c,r,y,i,D,A){return n(),a("div",null,e)}const h=s(p,[["render",t]]);export{B as __pageData,h as default};
