import{_ as i,c as a,o as l,as as n}from"./chunks/framework.B-x_5eXW.js";const c=JSON.parse('{"title":"使用 Cursor Rules 自定义 AI 编码行为","description":"","frontmatter":{"outline":"deep"},"headers":[],"relativePath":"ai_thinking/Cursor Rules 自定义 AI 编码行为.md","filePath":"ai_thinking/Cursor Rules 自定义 AI 编码行为.md","lastUpdated":1758165179000}'),t={name:"ai_thinking/Cursor Rules 自定义 AI 编码行为.md"};function e(h,s,p,r,k,o){return l(),a("div",null,s[0]||(s[0]=[n(`<h1 id="使用-cursor-rules-自定义-ai-编码行为" tabindex="-1">使用 Cursor Rules 自定义 AI 编码行为 <a class="header-anchor" href="#使用-cursor-rules-自定义-ai-编码行为" aria-label="Permalink to &quot;使用 Cursor Rules 自定义 AI 编码行为&quot;">​</a></h1><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to &quot;概述&quot;">​</a></h2><p>Cursor Rules 是 Cursor 编辑器中的一项功能，允许开发者通过定义规则自定义 AI 的代码生成行为。这些规则充当系统提示，指导 AI 生成符合项目规范、编码风格和技术栈要求的代码。规则分为两种类型：</p><ul><li><strong>全局规则</strong>：在 Cursor 设置中配置，适用于所有项目。</li><li><strong>项目规则</strong>：存储在项目根目录的 <code>.cursor/rules</code> 文件夹中，仅对特定项目生效。</li></ul><p><strong>注意</strong>：旧版 <code>.cursorrules</code> 文件已废弃，推荐使用 <code>.cursor/rules</code> 目录下的 <code>.mdc</code> 文件。</p><h2 id="为什么使用-cursor-rules" tabindex="-1">为什么使用 Cursor Rules？ <a class="header-anchor" href="#为什么使用-cursor-rules" aria-label="Permalink to &quot;为什么使用 Cursor Rules？&quot;">​</a></h2><ul><li><strong>代码一致性</strong>：确保 AI 生成的代码遵循团队编码标准。</li><li><strong>上下文增强</strong>：提供项目背景，提升 AI 代码的相关性和准确性。</li><li><strong>效率提升</strong>：减少手动修改 AI 生成代码的时间。</li><li><strong>团队协作</strong>：通过共享规则文件保持代码风格统一。</li></ul><h2 id="设置-cursor-rules" tabindex="-1">设置 Cursor Rules <a class="header-anchor" href="#设置-cursor-rules" aria-label="Permalink to &quot;设置 Cursor Rules&quot;">​</a></h2><h3 id="_1-配置全局规则" tabindex="-1">1. 配置全局规则 <a class="header-anchor" href="#_1-配置全局规则" aria-label="Permalink to &quot;1. 配置全局规则&quot;">​</a></h3><p>全局规则适用于所有项目，适合设置个人编码偏好。</p><p><strong>步骤</strong>：</p><ol><li><p>打开 Cursor 编辑器。</p></li><li><p>导航到 <strong>Cursor Settings &gt; Rules &gt; User Rules</strong>。</p></li><li><p>输入全局规则内容，例如：</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用 TypeScript 编写新代码。</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 优先使用 async/await，避免回调。</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 遵循单一职责原则。</span></span></code></pre></div></li><li><p>保存设置，规则将应用于所有项目。</p></li></ol><h3 id="_2-配置项目规则" tabindex="-1">2. 配置项目规则 <a class="header-anchor" href="#_2-配置项目规则" aria-label="Permalink to &quot;2. 配置项目规则&quot;">​</a></h3><p>项目规则存储在 <code>.cursor/rules</code> 目录下的 <code>.mdc</code> 文件中，支持按文件类型或目录定制。</p><p><strong>步骤</strong>：</p><ol><li><p>在项目根目录创建 <code>.cursor/rules</code> 文件夹。</p></li><li><p>创建 <code>.mdc</code> 文件（如 <code>general.mdc</code> 或 <code>javascript.mdc</code>）。</p></li><li><p>使用 Markdown 格式编写规则，并通过元数据（如 <code>Globs</code>）指定适用范围。例如：</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">---</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Globs: *</span><span style="--shiki-light:#24292E;--shiki-light-font-style:italic;--shiki-dark:#E1E4E8;--shiki-dark-font-style:italic;">*/*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RuleType: Auto Attached</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;">---</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># JavaScript 编码规则</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用 ES6+ 语法。</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 变量命名使用 camelCase。</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 每个函数包含 JSDoc 注释。</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 避免使用 var，优先使用 const 或 let。</span></span></code></pre></div></li><li><p>保存文件，Cursor 将自动应用规则到匹配的文件。</p></li></ol><p><strong>快捷创建</strong>：</p><ul><li>按 <code>Cmd + Shift + P</code>（Mac）或 <code>Ctrl + Shift + P</code>（Windows/Linux），选择 <strong>New Cursor Rule</strong>。</li><li>选择模板或手动创建 <code>.mdc</code> 文件。</li></ul><h3 id="_3-配置项概览" tabindex="-1">3. 配置项概览 <a class="header-anchor" href="#_3-配置项概览" aria-label="Permalink to &quot;3. 配置项概览&quot;">​</a></h3><p>已知的主要配置项包括：</p><ol><li><p><strong>Globs</strong></p><ul><li><strong>描述</strong>：指定规则适用的文件路径模式，使用 Glob 语法。</li><li><strong>类型</strong>：字符串或字符串数组。</li><li><strong>示例</strong>：<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Globs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">*</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">/*.ts</span></span></code></pre></div><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Globs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">*</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">/*.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">*</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">/*.jsx</span></span></code></pre></div></li><li><strong>作用</strong>：限制规则仅对匹配的文件生效，如 TypeScript 文件或特定目录。</li></ul></li><li><p><strong>RuleType</strong></p><ul><li><strong>描述</strong>：定义规则的触发方式。</li><li><strong>类型</strong>：枚举值（<code>Always</code>、<code>Auto Attached</code>）。</li><li><strong>示例</strong>：<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">RuleType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Auto Attached</span></span></code></pre></div></li><li><strong>可选值</strong>： <ul><li><code>Always</code>：规则始终生效，适用于全局项目背景或通用规范。</li><li><code>Auto Attached</code>：仅对 <code>Globs</code> 匹配的文件生效，适合文件类型特定规则。</li></ul></li><li><strong>默认值</strong>：未明确指定时，通常按 <code>Auto Attached</code> 处理（若有 <code>Globs</code>）。</li></ul></li><li><p><strong>Priority</strong></p><ul><li><strong>描述</strong>：设置规则的优先级，用于解决多规则冲突。</li><li><strong>类型</strong>：整数（越高优先级越高）。</li><li><strong>示例</strong>：<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Priority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span></span></code></pre></div></li><li><strong>作用</strong>：当多个规则同时适用时，高优先级的规则优先生效。默认优先级为 0。</li></ul></li><li><p><strong>Scope</strong></p><ul><li><strong>描述</strong>：指定规则的作用范围，通常与项目结构或上下文相关。</li><li><strong>类型</strong>：字符串。</li><li><strong>示例</strong>：<div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">frontend</span></span></code></pre></div></li><li><strong>作用</strong>：用于区分规则适用的项目部分（如 <code>frontend</code> 或 <code>backend</code>），目前使用较少，依赖项目复杂性。</li></ul></li></ol><p><strong>配置项使用示例</strong></p><p>以下是一个综合使用多种配置项的 <code>.mdc</code> 文件示例：</p><p><strong>文件：<code>.cursor/rules/typescript.mdc</code></strong></p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">---</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Globs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">*</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">/*.ts</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  - </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">*</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">/*.tsx</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">RuleType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Auto Attached</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Priority</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Scope</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">frontend</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">---</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># TypeScript 编码规则</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用严格模式 (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\`strict: true\`</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)。</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 优先使用接口（interface）而非类型别名（type）。</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 每个导出函数包含 JSDoc 注释。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @file src/types/example.ts</span></span></code></pre></div><p><strong>解释</strong>：</p><ul><li><code>Globs</code>：规则适用于所有 <code>.ts</code> 和 <code>.tsx</code> 文件。</li><li><code>RuleType: Auto Attached</code>：仅对匹配 <code>Globs</code> 的文件生效。</li><li><code>Priority: 5</code>：设置优先级高于默认值，确保 TypeScript 规则优先于通用规则。</li><li><code>Scope: frontend</code>：表示规则主要用于前端代码。</li></ul><h2 id="最佳实践" tabindex="-1">最佳实践 <a class="header-anchor" href="#最佳实践" aria-label="Permalink to &quot;最佳实践&quot;">​</a></h2><h3 id="_1-按主题组织规则" tabindex="-1">1. 按主题组织规则 <a class="header-anchor" href="#_1-按主题组织规则" aria-label="Permalink to &quot;1. 按主题组织规则&quot;">​</a></h3><p>为不同技术栈或场景创建单独的 <code>.mdc</code> 文件，例如：</p><ul><li><code>general.mdc</code>：项目背景、通用规范。</li><li><code>typescript.mdc</code>：TypeScript 特定规则。</li><li><code>react.mdc</code>：React 组件规范。</li></ul><p>示例（<code>react.mdc</code>）：</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">---</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Globs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">*</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">/*.tsx,</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">*</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">/*.jsx</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">RuleType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Auto Attached</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">---</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># React 组件规则</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用函数组件和 React Hooks。</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 组件文件名使用 PascalCase。</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 每个组件包含 TypeScript 类型定义。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @file src/components/Button.tsx</span></span></code></pre></div><h3 id="_2-使用-file-提供上下文" tabindex="-1">2. 使用 <code>@file</code> 提供上下文 <a class="header-anchor" href="#_2-使用-file-提供上下文" aria-label="Permalink to &quot;2. 使用 \`@file\` 提供上下文&quot;">​</a></h3><p>通过 <code>@file</code> 引用项目文件，为 AI 提供更多背景。例如：</p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># 样式规则</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用 Tailwind CSS 进行样式设计。</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 避免内联样式。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @file src/styles/tailwind.css</span></span></code></pre></div><h3 id="_3-利用-glob-模式" tabindex="-1">3. 利用 Glob 模式 <a class="header-anchor" href="#_3-利用-glob-模式" aria-label="Permalink to &quot;3. 利用 Glob 模式&quot;">​</a></h3><p>通过 <code>Globs</code> 元数据指定规则适用范围：</p><ul><li><code>**/*.ts</code>：所有 TypeScript 文件。</li><li><code>src/api/**/*</code>：<code>src/api</code> 目录下的所有文件。</li></ul><h3 id="_4-定期优化规则" tabindex="-1">4. 定期优化规则 <a class="header-anchor" href="#_4-定期优化规则" aria-label="Permalink to &quot;4. 定期优化规则&quot;">​</a></h3><ul><li>随着项目演进，定期更新规则以反映最新需求。</li><li>确保规则清晰、互不冲突。</li></ul><h3 id="_5-参考社区资源" tabindex="-1">5. 参考社区资源 <a class="header-anchor" href="#_5-参考社区资源" aria-label="Permalink to &quot;5. 参考社区资源&quot;">​</a></h3><ul><li><a href="https://github.com/PatrickJS/awesome-cursorrules" target="_blank" rel="noreferrer">Awesome CursorRules</a>：社区共享的规则模板。</li><li><a href="https://docs.cursor.ac.cn" target="_blank" rel="noreferrer">Cursor 官方文档</a>：详细的规则配置指南。</li></ul><h2 id="示例-vue-项目规则" tabindex="-1">示例：Vue 项目规则 <a class="header-anchor" href="#示例-vue-项目规则" aria-label="Permalink to &quot;示例：Vue 项目规则&quot;">​</a></h2><p><strong>文件：<code>.cursor/rules/general.mdc</code></strong></p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">---</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">RuleType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Always</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">---</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># 项目概述</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> Vue 3 + TypeScript 单页应用。</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用 Vite 构建，Pinia 状态管理。</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 代码遵循模块化设计。</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># 通用规范</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 文件名使用 kebab-case。</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用 ESLint 和 Prettier 格式化代码。</span></span></code></pre></div><p><strong>文件：<code>.cursor/rules/vue.mdc</code></strong></p><div class="language-markdown vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">markdown</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">---</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">Globs</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">*</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">/*.vue</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">RuleType</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">Auto Attached</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">---</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-light-font-weight:bold;--shiki-dark:#79B8FF;--shiki-dark-font-weight:bold;"># Vue 组件规则</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用 Composition API。</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 组件文件名使用 PascalCase。</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 添加 JSDoc 注释说明 props。</span></span>
<span class="line"><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 使用 scoped CSS。</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  @file src/components/AppHeader.vue</span></span></code></pre></div><h2 id="注意事项" tabindex="-1">注意事项 <a class="header-anchor" href="#注意事项" aria-label="Permalink to &quot;注意事项&quot;">​</a></h2><ul><li><strong>优先级</strong>：项目规则优先于全局规则，多个 <code>.mdc</code> 文件可能同时应用。</li><li><strong>版本控制</strong>：将 <code>.cursor/rules</code> 纳入 Git，确保团队同步。</li><li><strong>AI 局限性</strong>：AI 可能偶尔忽略规则，需审查生成代码并调整规则。</li><li><strong>兼容性</strong>：旧版 <code>.cursorrules</code> 在 Cursor v0.47 及以下版本可用，但未来将被移除。</li></ul><h2 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h2><p>Cursor Rules 帮助开发者定制 AI 编码行为，确保生成代码符合项目需求。通过全局和项目规则的结合，以及清晰的组织和社区资源，你可以大幅提升开发效率和代码质量。</p><p><strong>资源</strong>：</p><ul><li><a href="https://docs.cursor.ac.cn" target="_blank" rel="noreferrer">Cursor 官方文档</a></li><li><a href="https://cursor.directory/rules" target="_blank" rel="noreferrer">Cursor Rules</a></li><li><a href="https://github.com/PatrickJS/awesome-cursorrules" target="_blank" rel="noreferrer">Awesome CursorRules</a></li><li><a href="https://cursorrules.agnt.one" target="_blank" rel="noreferrer">中文社区</a></li></ul>`,54)]))}const g=i(t,[["render",e]]);export{c as __pageData,g as default};
